
Mini_Project3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  00800060  000020de  00002152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001c98  00000000  00000000  00002284  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000db2  00000000  00000000  00003f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00004cce  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00004e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  0000746b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  000087f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  000099c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  00009b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  00009e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a7ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
       2:	00 00       	nop
       4:	3c c0       	rjmp	.+120    	; 0x7e <__bad_interrupt>
       6:	00 00       	nop
       8:	3a c0       	rjmp	.+116    	; 0x7e <__bad_interrupt>
       a:	00 00       	nop
       c:	38 c0       	rjmp	.+112    	; 0x7e <__bad_interrupt>
       e:	00 00       	nop
      10:	36 c0       	rjmp	.+108    	; 0x7e <__bad_interrupt>
      12:	00 00       	nop
      14:	34 c0       	rjmp	.+104    	; 0x7e <__bad_interrupt>
      16:	00 00       	nop
      18:	32 c0       	rjmp	.+100    	; 0x7e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	30 c0       	rjmp	.+96     	; 0x7e <__bad_interrupt>
      1e:	00 00       	nop
      20:	2e c0       	rjmp	.+92     	; 0x7e <__bad_interrupt>
      22:	00 00       	nop
      24:	2c c0       	rjmp	.+88     	; 0x7e <__bad_interrupt>
      26:	00 00       	nop
      28:	2a c0       	rjmp	.+84     	; 0x7e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	28 c0       	rjmp	.+80     	; 0x7e <__bad_interrupt>
      2e:	00 00       	nop
      30:	26 c0       	rjmp	.+76     	; 0x7e <__bad_interrupt>
      32:	00 00       	nop
      34:	24 c0       	rjmp	.+72     	; 0x7e <__bad_interrupt>
      36:	00 00       	nop
      38:	22 c0       	rjmp	.+68     	; 0x7e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	20 c0       	rjmp	.+64     	; 0x7e <__bad_interrupt>
      3e:	00 00       	nop
      40:	1e c0       	rjmp	.+60     	; 0x7e <__bad_interrupt>
      42:	00 00       	nop
      44:	1c c0       	rjmp	.+56     	; 0x7e <__bad_interrupt>
      46:	00 00       	nop
      48:	1a c0       	rjmp	.+52     	; 0x7e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	18 c0       	rjmp	.+48     	; 0x7e <__bad_interrupt>
      4e:	00 00       	nop
      50:	16 c0       	rjmp	.+44     	; 0x7e <__bad_interrupt>
	...

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ed       	ldi	r30, 0xDE	; 222
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <main>
      7a:	0c 94 6d 10 	jmp	0x20da	; 0x20da <_exit>

0000007e <__bad_interrupt>:
      7e:	c0 cf       	rjmp	.-128    	; 0x0 <__vectors>

00000080 <__fixunssfsi>:
      80:	ef 92       	push	r14
      82:	ff 92       	push	r15
      84:	0f 93       	push	r16
      86:	1f 93       	push	r17
      88:	7b 01       	movw	r14, r22
      8a:	8c 01       	movw	r16, r24
      8c:	20 e0       	ldi	r18, 0x00	; 0
      8e:	30 e0       	ldi	r19, 0x00	; 0
      90:	40 e0       	ldi	r20, 0x00	; 0
      92:	5f e4       	ldi	r21, 0x4F	; 79
      94:	8c d3       	rcall	.+1816   	; 0x7ae <__gesf2>
      96:	88 23       	and	r24, r24
      98:	7c f0       	brlt	.+30     	; 0xb8 <__fixunssfsi+0x38>
      9a:	c8 01       	movw	r24, r16
      9c:	b7 01       	movw	r22, r14
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	60 d1       	rcall	.+704    	; 0x368 <__subsf3>
      a8:	dc d3       	rcall	.+1976   	; 0x862 <__fixsfsi>
      aa:	9b 01       	movw	r18, r22
      ac:	ac 01       	movw	r20, r24
      ae:	20 50       	subi	r18, 0x00	; 0
      b0:	30 40       	sbci	r19, 0x00	; 0
      b2:	40 40       	sbci	r20, 0x00	; 0
      b4:	50 48       	sbci	r21, 0x80	; 128
      b6:	05 c0       	rjmp	.+10     	; 0xc2 <__fixunssfsi+0x42>
      b8:	c8 01       	movw	r24, r16
      ba:	b7 01       	movw	r22, r14
      bc:	d2 d3       	rcall	.+1956   	; 0x862 <__fixsfsi>
      be:	9b 01       	movw	r18, r22
      c0:	ac 01       	movw	r20, r24
      c2:	b9 01       	movw	r22, r18
      c4:	ca 01       	movw	r24, r20
      c6:	1f 91       	pop	r17
      c8:	0f 91       	pop	r16
      ca:	ff 90       	pop	r15
      cc:	ef 90       	pop	r14
      ce:	08 95       	ret

000000d0 <_fpadd_parts>:
      d0:	a0 e0       	ldi	r26, 0x00	; 0
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	ee e6       	ldi	r30, 0x6E	; 110
      d6:	f0 e0       	ldi	r31, 0x00	; 0
      d8:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__prologue_saves__>
      dc:	dc 01       	movw	r26, r24
      de:	2b 01       	movw	r4, r22
      e0:	fa 01       	movw	r30, r20
      e2:	9c 91       	ld	r25, X
      e4:	92 30       	cpi	r25, 0x02	; 2
      e6:	08 f4       	brcc	.+2      	; 0xea <_fpadd_parts+0x1a>
      e8:	39 c1       	rjmp	.+626    	; 0x35c <_fpadd_parts+0x28c>
      ea:	eb 01       	movw	r28, r22
      ec:	88 81       	ld	r24, Y
      ee:	82 30       	cpi	r24, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x24>
      f2:	33 c1       	rjmp	.+614    	; 0x35a <_fpadd_parts+0x28a>
      f4:	94 30       	cpi	r25, 0x04	; 4
      f6:	69 f4       	brne	.+26     	; 0x112 <_fpadd_parts+0x42>
      f8:	84 30       	cpi	r24, 0x04	; 4
      fa:	09 f0       	breq	.+2      	; 0xfe <_fpadd_parts+0x2e>
      fc:	2f c1       	rjmp	.+606    	; 0x35c <_fpadd_parts+0x28c>
      fe:	11 96       	adiw	r26, 0x01	; 1
     100:	9c 91       	ld	r25, X
     102:	11 97       	sbiw	r26, 0x01	; 1
     104:	89 81       	ldd	r24, Y+1	; 0x01
     106:	98 17       	cp	r25, r24
     108:	09 f4       	brne	.+2      	; 0x10c <_fpadd_parts+0x3c>
     10a:	28 c1       	rjmp	.+592    	; 0x35c <_fpadd_parts+0x28c>
     10c:	a8 e8       	ldi	r26, 0x88	; 136
     10e:	b0 e0       	ldi	r27, 0x00	; 0
     110:	25 c1       	rjmp	.+586    	; 0x35c <_fpadd_parts+0x28c>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f4       	brne	.+2      	; 0x118 <_fpadd_parts+0x48>
     116:	21 c1       	rjmp	.+578    	; 0x35a <_fpadd_parts+0x28a>
     118:	82 30       	cpi	r24, 0x02	; 2
     11a:	a9 f4       	brne	.+42     	; 0x146 <_fpadd_parts+0x76>
     11c:	92 30       	cpi	r25, 0x02	; 2
     11e:	09 f0       	breq	.+2      	; 0x122 <_fpadd_parts+0x52>
     120:	1d c1       	rjmp	.+570    	; 0x35c <_fpadd_parts+0x28c>
     122:	9a 01       	movw	r18, r20
     124:	ad 01       	movw	r20, r26
     126:	88 e0       	ldi	r24, 0x08	; 8
     128:	ea 01       	movw	r28, r20
     12a:	09 90       	ld	r0, Y+
     12c:	ae 01       	movw	r20, r28
     12e:	e9 01       	movw	r28, r18
     130:	09 92       	st	Y+, r0
     132:	9e 01       	movw	r18, r28
     134:	81 50       	subi	r24, 0x01	; 1
     136:	c1 f7       	brne	.-16     	; 0x128 <_fpadd_parts+0x58>
     138:	e2 01       	movw	r28, r4
     13a:	89 81       	ldd	r24, Y+1	; 0x01
     13c:	11 96       	adiw	r26, 0x01	; 1
     13e:	9c 91       	ld	r25, X
     140:	89 23       	and	r24, r25
     142:	81 83       	std	Z+1, r24	; 0x01
     144:	08 c1       	rjmp	.+528    	; 0x356 <_fpadd_parts+0x286>
     146:	92 30       	cpi	r25, 0x02	; 2
     148:	09 f4       	brne	.+2      	; 0x14c <_fpadd_parts+0x7c>
     14a:	07 c1       	rjmp	.+526    	; 0x35a <_fpadd_parts+0x28a>
     14c:	12 96       	adiw	r26, 0x02	; 2
     14e:	2d 90       	ld	r2, X+
     150:	3c 90       	ld	r3, X
     152:	13 97       	sbiw	r26, 0x03	; 3
     154:	eb 01       	movw	r28, r22
     156:	8a 81       	ldd	r24, Y+2	; 0x02
     158:	9b 81       	ldd	r25, Y+3	; 0x03
     15a:	14 96       	adiw	r26, 0x04	; 4
     15c:	ad 90       	ld	r10, X+
     15e:	bd 90       	ld	r11, X+
     160:	cd 90       	ld	r12, X+
     162:	dc 90       	ld	r13, X
     164:	17 97       	sbiw	r26, 0x07	; 7
     166:	ec 80       	ldd	r14, Y+4	; 0x04
     168:	fd 80       	ldd	r15, Y+5	; 0x05
     16a:	0e 81       	ldd	r16, Y+6	; 0x06
     16c:	1f 81       	ldd	r17, Y+7	; 0x07
     16e:	91 01       	movw	r18, r2
     170:	28 1b       	sub	r18, r24
     172:	39 0b       	sbc	r19, r25
     174:	b9 01       	movw	r22, r18
     176:	37 ff       	sbrs	r19, 7
     178:	04 c0       	rjmp	.+8      	; 0x182 <_fpadd_parts+0xb2>
     17a:	66 27       	eor	r22, r22
     17c:	77 27       	eor	r23, r23
     17e:	62 1b       	sub	r22, r18
     180:	73 0b       	sbc	r23, r19
     182:	60 32       	cpi	r22, 0x20	; 32
     184:	71 05       	cpc	r23, r1
     186:	0c f0       	brlt	.+2      	; 0x18a <_fpadd_parts+0xba>
     188:	61 c0       	rjmp	.+194    	; 0x24c <_fpadd_parts+0x17c>
     18a:	12 16       	cp	r1, r18
     18c:	13 06       	cpc	r1, r19
     18e:	6c f5       	brge	.+90     	; 0x1ea <_fpadd_parts+0x11a>
     190:	37 01       	movw	r6, r14
     192:	48 01       	movw	r8, r16
     194:	06 2e       	mov	r0, r22
     196:	04 c0       	rjmp	.+8      	; 0x1a0 <_fpadd_parts+0xd0>
     198:	96 94       	lsr	r9
     19a:	87 94       	ror	r8
     19c:	77 94       	ror	r7
     19e:	67 94       	ror	r6
     1a0:	0a 94       	dec	r0
     1a2:	d2 f7       	brpl	.-12     	; 0x198 <_fpadd_parts+0xc8>
     1a4:	21 e0       	ldi	r18, 0x01	; 1
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	40 e0       	ldi	r20, 0x00	; 0
     1aa:	50 e0       	ldi	r21, 0x00	; 0
     1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <_fpadd_parts+0xe6>
     1ae:	22 0f       	add	r18, r18
     1b0:	33 1f       	adc	r19, r19
     1b2:	44 1f       	adc	r20, r20
     1b4:	55 1f       	adc	r21, r21
     1b6:	6a 95       	dec	r22
     1b8:	d2 f7       	brpl	.-12     	; 0x1ae <_fpadd_parts+0xde>
     1ba:	21 50       	subi	r18, 0x01	; 1
     1bc:	30 40       	sbci	r19, 0x00	; 0
     1be:	40 40       	sbci	r20, 0x00	; 0
     1c0:	50 40       	sbci	r21, 0x00	; 0
     1c2:	2e 21       	and	r18, r14
     1c4:	3f 21       	and	r19, r15
     1c6:	40 23       	and	r20, r16
     1c8:	51 23       	and	r21, r17
     1ca:	21 15       	cp	r18, r1
     1cc:	31 05       	cpc	r19, r1
     1ce:	41 05       	cpc	r20, r1
     1d0:	51 05       	cpc	r21, r1
     1d2:	21 f0       	breq	.+8      	; 0x1dc <_fpadd_parts+0x10c>
     1d4:	21 e0       	ldi	r18, 0x01	; 1
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	40 e0       	ldi	r20, 0x00	; 0
     1da:	50 e0       	ldi	r21, 0x00	; 0
     1dc:	79 01       	movw	r14, r18
     1de:	8a 01       	movw	r16, r20
     1e0:	e6 28       	or	r14, r6
     1e2:	f7 28       	or	r15, r7
     1e4:	08 29       	or	r16, r8
     1e6:	19 29       	or	r17, r9
     1e8:	3c c0       	rjmp	.+120    	; 0x262 <_fpadd_parts+0x192>
     1ea:	23 2b       	or	r18, r19
     1ec:	d1 f1       	breq	.+116    	; 0x262 <_fpadd_parts+0x192>
     1ee:	26 0e       	add	r2, r22
     1f0:	37 1e       	adc	r3, r23
     1f2:	35 01       	movw	r6, r10
     1f4:	46 01       	movw	r8, r12
     1f6:	06 2e       	mov	r0, r22
     1f8:	04 c0       	rjmp	.+8      	; 0x202 <_fpadd_parts+0x132>
     1fa:	96 94       	lsr	r9
     1fc:	87 94       	ror	r8
     1fe:	77 94       	ror	r7
     200:	67 94       	ror	r6
     202:	0a 94       	dec	r0
     204:	d2 f7       	brpl	.-12     	; 0x1fa <_fpadd_parts+0x12a>
     206:	21 e0       	ldi	r18, 0x01	; 1
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	40 e0       	ldi	r20, 0x00	; 0
     20c:	50 e0       	ldi	r21, 0x00	; 0
     20e:	04 c0       	rjmp	.+8      	; 0x218 <_fpadd_parts+0x148>
     210:	22 0f       	add	r18, r18
     212:	33 1f       	adc	r19, r19
     214:	44 1f       	adc	r20, r20
     216:	55 1f       	adc	r21, r21
     218:	6a 95       	dec	r22
     21a:	d2 f7       	brpl	.-12     	; 0x210 <_fpadd_parts+0x140>
     21c:	21 50       	subi	r18, 0x01	; 1
     21e:	30 40       	sbci	r19, 0x00	; 0
     220:	40 40       	sbci	r20, 0x00	; 0
     222:	50 40       	sbci	r21, 0x00	; 0
     224:	2a 21       	and	r18, r10
     226:	3b 21       	and	r19, r11
     228:	4c 21       	and	r20, r12
     22a:	5d 21       	and	r21, r13
     22c:	21 15       	cp	r18, r1
     22e:	31 05       	cpc	r19, r1
     230:	41 05       	cpc	r20, r1
     232:	51 05       	cpc	r21, r1
     234:	21 f0       	breq	.+8      	; 0x23e <_fpadd_parts+0x16e>
     236:	21 e0       	ldi	r18, 0x01	; 1
     238:	30 e0       	ldi	r19, 0x00	; 0
     23a:	40 e0       	ldi	r20, 0x00	; 0
     23c:	50 e0       	ldi	r21, 0x00	; 0
     23e:	59 01       	movw	r10, r18
     240:	6a 01       	movw	r12, r20
     242:	a6 28       	or	r10, r6
     244:	b7 28       	or	r11, r7
     246:	c8 28       	or	r12, r8
     248:	d9 28       	or	r13, r9
     24a:	0b c0       	rjmp	.+22     	; 0x262 <_fpadd_parts+0x192>
     24c:	82 15       	cp	r24, r2
     24e:	93 05       	cpc	r25, r3
     250:	2c f0       	brlt	.+10     	; 0x25c <_fpadd_parts+0x18c>
     252:	1c 01       	movw	r2, r24
     254:	aa 24       	eor	r10, r10
     256:	bb 24       	eor	r11, r11
     258:	65 01       	movw	r12, r10
     25a:	03 c0       	rjmp	.+6      	; 0x262 <_fpadd_parts+0x192>
     25c:	ee 24       	eor	r14, r14
     25e:	ff 24       	eor	r15, r15
     260:	87 01       	movw	r16, r14
     262:	11 96       	adiw	r26, 0x01	; 1
     264:	9c 91       	ld	r25, X
     266:	d2 01       	movw	r26, r4
     268:	11 96       	adiw	r26, 0x01	; 1
     26a:	8c 91       	ld	r24, X
     26c:	98 17       	cp	r25, r24
     26e:	09 f4       	brne	.+2      	; 0x272 <_fpadd_parts+0x1a2>
     270:	45 c0       	rjmp	.+138    	; 0x2fc <_fpadd_parts+0x22c>
     272:	99 23       	and	r25, r25
     274:	39 f0       	breq	.+14     	; 0x284 <_fpadd_parts+0x1b4>
     276:	a8 01       	movw	r20, r16
     278:	97 01       	movw	r18, r14
     27a:	2a 19       	sub	r18, r10
     27c:	3b 09       	sbc	r19, r11
     27e:	4c 09       	sbc	r20, r12
     280:	5d 09       	sbc	r21, r13
     282:	06 c0       	rjmp	.+12     	; 0x290 <_fpadd_parts+0x1c0>
     284:	a6 01       	movw	r20, r12
     286:	95 01       	movw	r18, r10
     288:	2e 19       	sub	r18, r14
     28a:	3f 09       	sbc	r19, r15
     28c:	40 0b       	sbc	r20, r16
     28e:	51 0b       	sbc	r21, r17
     290:	57 fd       	sbrc	r21, 7
     292:	08 c0       	rjmp	.+16     	; 0x2a4 <_fpadd_parts+0x1d4>
     294:	11 82       	std	Z+1, r1	; 0x01
     296:	33 82       	std	Z+3, r3	; 0x03
     298:	22 82       	std	Z+2, r2	; 0x02
     29a:	24 83       	std	Z+4, r18	; 0x04
     29c:	35 83       	std	Z+5, r19	; 0x05
     29e:	46 83       	std	Z+6, r20	; 0x06
     2a0:	57 83       	std	Z+7, r21	; 0x07
     2a2:	1d c0       	rjmp	.+58     	; 0x2de <_fpadd_parts+0x20e>
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	81 83       	std	Z+1, r24	; 0x01
     2a8:	33 82       	std	Z+3, r3	; 0x03
     2aa:	22 82       	std	Z+2, r2	; 0x02
     2ac:	88 27       	eor	r24, r24
     2ae:	99 27       	eor	r25, r25
     2b0:	dc 01       	movw	r26, r24
     2b2:	82 1b       	sub	r24, r18
     2b4:	93 0b       	sbc	r25, r19
     2b6:	a4 0b       	sbc	r26, r20
     2b8:	b5 0b       	sbc	r27, r21
     2ba:	84 83       	std	Z+4, r24	; 0x04
     2bc:	95 83       	std	Z+5, r25	; 0x05
     2be:	a6 83       	std	Z+6, r26	; 0x06
     2c0:	b7 83       	std	Z+7, r27	; 0x07
     2c2:	0d c0       	rjmp	.+26     	; 0x2de <_fpadd_parts+0x20e>
     2c4:	22 0f       	add	r18, r18
     2c6:	33 1f       	adc	r19, r19
     2c8:	44 1f       	adc	r20, r20
     2ca:	55 1f       	adc	r21, r21
     2cc:	24 83       	std	Z+4, r18	; 0x04
     2ce:	35 83       	std	Z+5, r19	; 0x05
     2d0:	46 83       	std	Z+6, r20	; 0x06
     2d2:	57 83       	std	Z+7, r21	; 0x07
     2d4:	82 81       	ldd	r24, Z+2	; 0x02
     2d6:	93 81       	ldd	r25, Z+3	; 0x03
     2d8:	01 97       	sbiw	r24, 0x01	; 1
     2da:	93 83       	std	Z+3, r25	; 0x03
     2dc:	82 83       	std	Z+2, r24	; 0x02
     2de:	24 81       	ldd	r18, Z+4	; 0x04
     2e0:	35 81       	ldd	r19, Z+5	; 0x05
     2e2:	46 81       	ldd	r20, Z+6	; 0x06
     2e4:	57 81       	ldd	r21, Z+7	; 0x07
     2e6:	da 01       	movw	r26, r20
     2e8:	c9 01       	movw	r24, r18
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	a1 09       	sbc	r26, r1
     2ee:	b1 09       	sbc	r27, r1
     2f0:	8f 5f       	subi	r24, 0xFF	; 255
     2f2:	9f 4f       	sbci	r25, 0xFF	; 255
     2f4:	af 4f       	sbci	r26, 0xFF	; 255
     2f6:	bf 43       	sbci	r27, 0x3F	; 63
     2f8:	28 f3       	brcs	.-54     	; 0x2c4 <_fpadd_parts+0x1f4>
     2fa:	0b c0       	rjmp	.+22     	; 0x312 <_fpadd_parts+0x242>
     2fc:	91 83       	std	Z+1, r25	; 0x01
     2fe:	33 82       	std	Z+3, r3	; 0x03
     300:	22 82       	std	Z+2, r2	; 0x02
     302:	ea 0c       	add	r14, r10
     304:	fb 1c       	adc	r15, r11
     306:	0c 1d       	adc	r16, r12
     308:	1d 1d       	adc	r17, r13
     30a:	e4 82       	std	Z+4, r14	; 0x04
     30c:	f5 82       	std	Z+5, r15	; 0x05
     30e:	06 83       	std	Z+6, r16	; 0x06
     310:	17 83       	std	Z+7, r17	; 0x07
     312:	83 e0       	ldi	r24, 0x03	; 3
     314:	80 83       	st	Z, r24
     316:	24 81       	ldd	r18, Z+4	; 0x04
     318:	35 81       	ldd	r19, Z+5	; 0x05
     31a:	46 81       	ldd	r20, Z+6	; 0x06
     31c:	57 81       	ldd	r21, Z+7	; 0x07
     31e:	57 ff       	sbrs	r21, 7
     320:	1a c0       	rjmp	.+52     	; 0x356 <_fpadd_parts+0x286>
     322:	c9 01       	movw	r24, r18
     324:	aa 27       	eor	r26, r26
     326:	97 fd       	sbrc	r25, 7
     328:	a0 95       	com	r26
     32a:	ba 2f       	mov	r27, r26
     32c:	81 70       	andi	r24, 0x01	; 1
     32e:	90 70       	andi	r25, 0x00	; 0
     330:	a0 70       	andi	r26, 0x00	; 0
     332:	b0 70       	andi	r27, 0x00	; 0
     334:	56 95       	lsr	r21
     336:	47 95       	ror	r20
     338:	37 95       	ror	r19
     33a:	27 95       	ror	r18
     33c:	82 2b       	or	r24, r18
     33e:	93 2b       	or	r25, r19
     340:	a4 2b       	or	r26, r20
     342:	b5 2b       	or	r27, r21
     344:	84 83       	std	Z+4, r24	; 0x04
     346:	95 83       	std	Z+5, r25	; 0x05
     348:	a6 83       	std	Z+6, r26	; 0x06
     34a:	b7 83       	std	Z+7, r27	; 0x07
     34c:	82 81       	ldd	r24, Z+2	; 0x02
     34e:	93 81       	ldd	r25, Z+3	; 0x03
     350:	01 96       	adiw	r24, 0x01	; 1
     352:	93 83       	std	Z+3, r25	; 0x03
     354:	82 83       	std	Z+2, r24	; 0x02
     356:	df 01       	movw	r26, r30
     358:	01 c0       	rjmp	.+2      	; 0x35c <_fpadd_parts+0x28c>
     35a:	d2 01       	movw	r26, r4
     35c:	cd 01       	movw	r24, r26
     35e:	cd b7       	in	r28, 0x3d	; 61
     360:	de b7       	in	r29, 0x3e	; 62
     362:	e2 e1       	ldi	r30, 0x12	; 18
     364:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__epilogue_restores__>

00000368 <__subsf3>:
     368:	a0 e2       	ldi	r26, 0x20	; 32
     36a:	b0 e0       	ldi	r27, 0x00	; 0
     36c:	ea eb       	ldi	r30, 0xBA	; 186
     36e:	f1 e0       	ldi	r31, 0x01	; 1
     370:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <__prologue_saves__+0x18>
     374:	69 83       	std	Y+1, r22	; 0x01
     376:	7a 83       	std	Y+2, r23	; 0x02
     378:	8b 83       	std	Y+3, r24	; 0x03
     37a:	9c 83       	std	Y+4, r25	; 0x04
     37c:	2d 83       	std	Y+5, r18	; 0x05
     37e:	3e 83       	std	Y+6, r19	; 0x06
     380:	4f 83       	std	Y+7, r20	; 0x07
     382:	58 87       	std	Y+8, r21	; 0x08
     384:	e9 e0       	ldi	r30, 0x09	; 9
     386:	ee 2e       	mov	r14, r30
     388:	f1 2c       	mov	r15, r1
     38a:	ec 0e       	add	r14, r28
     38c:	fd 1e       	adc	r15, r29
     38e:	ce 01       	movw	r24, r28
     390:	01 96       	adiw	r24, 0x01	; 1
     392:	b7 01       	movw	r22, r14
     394:	54 d4       	rcall	.+2216   	; 0xc3e <__unpack_f>
     396:	8e 01       	movw	r16, r28
     398:	0f 5e       	subi	r16, 0xEF	; 239
     39a:	1f 4f       	sbci	r17, 0xFF	; 255
     39c:	ce 01       	movw	r24, r28
     39e:	05 96       	adiw	r24, 0x05	; 5
     3a0:	b8 01       	movw	r22, r16
     3a2:	4d d4       	rcall	.+2202   	; 0xc3e <__unpack_f>
     3a4:	8a 89       	ldd	r24, Y+18	; 0x12
     3a6:	91 e0       	ldi	r25, 0x01	; 1
     3a8:	89 27       	eor	r24, r25
     3aa:	8a 8b       	std	Y+18, r24	; 0x12
     3ac:	c7 01       	movw	r24, r14
     3ae:	b8 01       	movw	r22, r16
     3b0:	ae 01       	movw	r20, r28
     3b2:	47 5e       	subi	r20, 0xE7	; 231
     3b4:	5f 4f       	sbci	r21, 0xFF	; 255
     3b6:	8c de       	rcall	.-744    	; 0xd0 <_fpadd_parts>
     3b8:	6d d3       	rcall	.+1754   	; 0xa94 <__pack_f>
     3ba:	a0 96       	adiw	r28, 0x20	; 32
     3bc:	e6 e0       	ldi	r30, 0x06	; 6
     3be:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__epilogue_restores__+0x18>

000003c2 <__addsf3>:
     3c2:	a0 e2       	ldi	r26, 0x20	; 32
     3c4:	b0 e0       	ldi	r27, 0x00	; 0
     3c6:	e7 ee       	ldi	r30, 0xE7	; 231
     3c8:	f1 e0       	ldi	r31, 0x01	; 1
     3ca:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <__prologue_saves__+0x18>
     3ce:	69 83       	std	Y+1, r22	; 0x01
     3d0:	7a 83       	std	Y+2, r23	; 0x02
     3d2:	8b 83       	std	Y+3, r24	; 0x03
     3d4:	9c 83       	std	Y+4, r25	; 0x04
     3d6:	2d 83       	std	Y+5, r18	; 0x05
     3d8:	3e 83       	std	Y+6, r19	; 0x06
     3da:	4f 83       	std	Y+7, r20	; 0x07
     3dc:	58 87       	std	Y+8, r21	; 0x08
     3de:	f9 e0       	ldi	r31, 0x09	; 9
     3e0:	ef 2e       	mov	r14, r31
     3e2:	f1 2c       	mov	r15, r1
     3e4:	ec 0e       	add	r14, r28
     3e6:	fd 1e       	adc	r15, r29
     3e8:	ce 01       	movw	r24, r28
     3ea:	01 96       	adiw	r24, 0x01	; 1
     3ec:	b7 01       	movw	r22, r14
     3ee:	27 d4       	rcall	.+2126   	; 0xc3e <__unpack_f>
     3f0:	8e 01       	movw	r16, r28
     3f2:	0f 5e       	subi	r16, 0xEF	; 239
     3f4:	1f 4f       	sbci	r17, 0xFF	; 255
     3f6:	ce 01       	movw	r24, r28
     3f8:	05 96       	adiw	r24, 0x05	; 5
     3fa:	b8 01       	movw	r22, r16
     3fc:	20 d4       	rcall	.+2112   	; 0xc3e <__unpack_f>
     3fe:	c7 01       	movw	r24, r14
     400:	b8 01       	movw	r22, r16
     402:	ae 01       	movw	r20, r28
     404:	47 5e       	subi	r20, 0xE7	; 231
     406:	5f 4f       	sbci	r21, 0xFF	; 255
     408:	63 de       	rcall	.-826    	; 0xd0 <_fpadd_parts>
     40a:	44 d3       	rcall	.+1672   	; 0xa94 <__pack_f>
     40c:	a0 96       	adiw	r28, 0x20	; 32
     40e:	e6 e0       	ldi	r30, 0x06	; 6
     410:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__epilogue_restores__+0x18>

00000414 <__mulsf3>:
     414:	a0 e2       	ldi	r26, 0x20	; 32
     416:	b0 e0       	ldi	r27, 0x00	; 0
     418:	e0 e1       	ldi	r30, 0x10	; 16
     41a:	f2 e0       	ldi	r31, 0x02	; 2
     41c:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__prologue_saves__>
     420:	69 83       	std	Y+1, r22	; 0x01
     422:	7a 83       	std	Y+2, r23	; 0x02
     424:	8b 83       	std	Y+3, r24	; 0x03
     426:	9c 83       	std	Y+4, r25	; 0x04
     428:	2d 83       	std	Y+5, r18	; 0x05
     42a:	3e 83       	std	Y+6, r19	; 0x06
     42c:	4f 83       	std	Y+7, r20	; 0x07
     42e:	58 87       	std	Y+8, r21	; 0x08
     430:	ce 01       	movw	r24, r28
     432:	01 96       	adiw	r24, 0x01	; 1
     434:	be 01       	movw	r22, r28
     436:	67 5f       	subi	r22, 0xF7	; 247
     438:	7f 4f       	sbci	r23, 0xFF	; 255
     43a:	01 d4       	rcall	.+2050   	; 0xc3e <__unpack_f>
     43c:	ce 01       	movw	r24, r28
     43e:	05 96       	adiw	r24, 0x05	; 5
     440:	be 01       	movw	r22, r28
     442:	6f 5e       	subi	r22, 0xEF	; 239
     444:	7f 4f       	sbci	r23, 0xFF	; 255
     446:	fb d3       	rcall	.+2038   	; 0xc3e <__unpack_f>
     448:	99 85       	ldd	r25, Y+9	; 0x09
     44a:	92 30       	cpi	r25, 0x02	; 2
     44c:	88 f0       	brcs	.+34     	; 0x470 <__stack+0x11>
     44e:	89 89       	ldd	r24, Y+17	; 0x11
     450:	82 30       	cpi	r24, 0x02	; 2
     452:	c8 f0       	brcs	.+50     	; 0x486 <__stack+0x27>
     454:	94 30       	cpi	r25, 0x04	; 4
     456:	19 f4       	brne	.+6      	; 0x45e <__mulsf3+0x4a>
     458:	82 30       	cpi	r24, 0x02	; 2
     45a:	51 f4       	brne	.+20     	; 0x470 <__stack+0x11>
     45c:	04 c0       	rjmp	.+8      	; 0x466 <__stack+0x7>
     45e:	84 30       	cpi	r24, 0x04	; 4
     460:	29 f4       	brne	.+10     	; 0x46c <__stack+0xd>
     462:	92 30       	cpi	r25, 0x02	; 2
     464:	81 f4       	brne	.+32     	; 0x486 <__stack+0x27>
     466:	88 e8       	ldi	r24, 0x88	; 136
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	c6 c0       	rjmp	.+396    	; 0x5f8 <__stack+0x199>
     46c:	92 30       	cpi	r25, 0x02	; 2
     46e:	49 f4       	brne	.+18     	; 0x482 <__stack+0x23>
     470:	20 e0       	ldi	r18, 0x00	; 0
     472:	9a 85       	ldd	r25, Y+10	; 0x0a
     474:	8a 89       	ldd	r24, Y+18	; 0x12
     476:	98 13       	cpse	r25, r24
     478:	21 e0       	ldi	r18, 0x01	; 1
     47a:	2a 87       	std	Y+10, r18	; 0x0a
     47c:	ce 01       	movw	r24, r28
     47e:	09 96       	adiw	r24, 0x09	; 9
     480:	bb c0       	rjmp	.+374    	; 0x5f8 <__stack+0x199>
     482:	82 30       	cpi	r24, 0x02	; 2
     484:	49 f4       	brne	.+18     	; 0x498 <__stack+0x39>
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	9a 85       	ldd	r25, Y+10	; 0x0a
     48a:	8a 89       	ldd	r24, Y+18	; 0x12
     48c:	98 13       	cpse	r25, r24
     48e:	21 e0       	ldi	r18, 0x01	; 1
     490:	2a 8b       	std	Y+18, r18	; 0x12
     492:	ce 01       	movw	r24, r28
     494:	41 96       	adiw	r24, 0x11	; 17
     496:	b0 c0       	rjmp	.+352    	; 0x5f8 <__stack+0x199>
     498:	2d 84       	ldd	r2, Y+13	; 0x0d
     49a:	3e 84       	ldd	r3, Y+14	; 0x0e
     49c:	4f 84       	ldd	r4, Y+15	; 0x0f
     49e:	58 88       	ldd	r5, Y+16	; 0x10
     4a0:	6d 88       	ldd	r6, Y+21	; 0x15
     4a2:	7e 88       	ldd	r7, Y+22	; 0x16
     4a4:	8f 88       	ldd	r8, Y+23	; 0x17
     4a6:	98 8c       	ldd	r9, Y+24	; 0x18
     4a8:	ee 24       	eor	r14, r14
     4aa:	ff 24       	eor	r15, r15
     4ac:	87 01       	movw	r16, r14
     4ae:	aa 24       	eor	r10, r10
     4b0:	bb 24       	eor	r11, r11
     4b2:	65 01       	movw	r12, r10
     4b4:	40 e0       	ldi	r20, 0x00	; 0
     4b6:	50 e0       	ldi	r21, 0x00	; 0
     4b8:	60 e0       	ldi	r22, 0x00	; 0
     4ba:	70 e0       	ldi	r23, 0x00	; 0
     4bc:	e0 e0       	ldi	r30, 0x00	; 0
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	c1 01       	movw	r24, r2
     4c2:	81 70       	andi	r24, 0x01	; 1
     4c4:	90 70       	andi	r25, 0x00	; 0
     4c6:	89 2b       	or	r24, r25
     4c8:	e9 f0       	breq	.+58     	; 0x504 <__stack+0xa5>
     4ca:	e6 0c       	add	r14, r6
     4cc:	f7 1c       	adc	r15, r7
     4ce:	08 1d       	adc	r16, r8
     4d0:	19 1d       	adc	r17, r9
     4d2:	9a 01       	movw	r18, r20
     4d4:	ab 01       	movw	r20, r22
     4d6:	2a 0d       	add	r18, r10
     4d8:	3b 1d       	adc	r19, r11
     4da:	4c 1d       	adc	r20, r12
     4dc:	5d 1d       	adc	r21, r13
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	a0 e0       	ldi	r26, 0x00	; 0
     4e4:	b0 e0       	ldi	r27, 0x00	; 0
     4e6:	e6 14       	cp	r14, r6
     4e8:	f7 04       	cpc	r15, r7
     4ea:	08 05       	cpc	r16, r8
     4ec:	19 05       	cpc	r17, r9
     4ee:	20 f4       	brcc	.+8      	; 0x4f8 <__stack+0x99>
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	a0 e0       	ldi	r26, 0x00	; 0
     4f6:	b0 e0       	ldi	r27, 0x00	; 0
     4f8:	ba 01       	movw	r22, r20
     4fa:	a9 01       	movw	r20, r18
     4fc:	48 0f       	add	r20, r24
     4fe:	59 1f       	adc	r21, r25
     500:	6a 1f       	adc	r22, r26
     502:	7b 1f       	adc	r23, r27
     504:	aa 0c       	add	r10, r10
     506:	bb 1c       	adc	r11, r11
     508:	cc 1c       	adc	r12, r12
     50a:	dd 1c       	adc	r13, r13
     50c:	97 fe       	sbrs	r9, 7
     50e:	08 c0       	rjmp	.+16     	; 0x520 <__stack+0xc1>
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	a0 e0       	ldi	r26, 0x00	; 0
     516:	b0 e0       	ldi	r27, 0x00	; 0
     518:	a8 2a       	or	r10, r24
     51a:	b9 2a       	or	r11, r25
     51c:	ca 2a       	or	r12, r26
     51e:	db 2a       	or	r13, r27
     520:	31 96       	adiw	r30, 0x01	; 1
     522:	e0 32       	cpi	r30, 0x20	; 32
     524:	f1 05       	cpc	r31, r1
     526:	49 f0       	breq	.+18     	; 0x53a <__stack+0xdb>
     528:	66 0c       	add	r6, r6
     52a:	77 1c       	adc	r7, r7
     52c:	88 1c       	adc	r8, r8
     52e:	99 1c       	adc	r9, r9
     530:	56 94       	lsr	r5
     532:	47 94       	ror	r4
     534:	37 94       	ror	r3
     536:	27 94       	ror	r2
     538:	c3 cf       	rjmp	.-122    	; 0x4c0 <__stack+0x61>
     53a:	fa 85       	ldd	r31, Y+10	; 0x0a
     53c:	ea 89       	ldd	r30, Y+18	; 0x12
     53e:	2b 89       	ldd	r18, Y+19	; 0x13
     540:	3c 89       	ldd	r19, Y+20	; 0x14
     542:	8b 85       	ldd	r24, Y+11	; 0x0b
     544:	9c 85       	ldd	r25, Y+12	; 0x0c
     546:	28 0f       	add	r18, r24
     548:	39 1f       	adc	r19, r25
     54a:	2e 5f       	subi	r18, 0xFE	; 254
     54c:	3f 4f       	sbci	r19, 0xFF	; 255
     54e:	17 c0       	rjmp	.+46     	; 0x57e <__stack+0x11f>
     550:	ca 01       	movw	r24, r20
     552:	81 70       	andi	r24, 0x01	; 1
     554:	90 70       	andi	r25, 0x00	; 0
     556:	89 2b       	or	r24, r25
     558:	61 f0       	breq	.+24     	; 0x572 <__stack+0x113>
     55a:	16 95       	lsr	r17
     55c:	07 95       	ror	r16
     55e:	f7 94       	ror	r15
     560:	e7 94       	ror	r14
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	a0 e0       	ldi	r26, 0x00	; 0
     568:	b0 e8       	ldi	r27, 0x80	; 128
     56a:	e8 2a       	or	r14, r24
     56c:	f9 2a       	or	r15, r25
     56e:	0a 2b       	or	r16, r26
     570:	1b 2b       	or	r17, r27
     572:	76 95       	lsr	r23
     574:	67 95       	ror	r22
     576:	57 95       	ror	r21
     578:	47 95       	ror	r20
     57a:	2f 5f       	subi	r18, 0xFF	; 255
     57c:	3f 4f       	sbci	r19, 0xFF	; 255
     57e:	77 fd       	sbrc	r23, 7
     580:	e7 cf       	rjmp	.-50     	; 0x550 <__stack+0xf1>
     582:	0c c0       	rjmp	.+24     	; 0x59c <__stack+0x13d>
     584:	44 0f       	add	r20, r20
     586:	55 1f       	adc	r21, r21
     588:	66 1f       	adc	r22, r22
     58a:	77 1f       	adc	r23, r23
     58c:	17 fd       	sbrc	r17, 7
     58e:	41 60       	ori	r20, 0x01	; 1
     590:	ee 0c       	add	r14, r14
     592:	ff 1c       	adc	r15, r15
     594:	00 1f       	adc	r16, r16
     596:	11 1f       	adc	r17, r17
     598:	21 50       	subi	r18, 0x01	; 1
     59a:	30 40       	sbci	r19, 0x00	; 0
     59c:	40 30       	cpi	r20, 0x00	; 0
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	59 07       	cpc	r21, r25
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	69 07       	cpc	r22, r25
     5a6:	90 e4       	ldi	r25, 0x40	; 64
     5a8:	79 07       	cpc	r23, r25
     5aa:	60 f3       	brcs	.-40     	; 0x584 <__stack+0x125>
     5ac:	2b 8f       	std	Y+27, r18	; 0x1b
     5ae:	3c 8f       	std	Y+28, r19	; 0x1c
     5b0:	db 01       	movw	r26, r22
     5b2:	ca 01       	movw	r24, r20
     5b4:	8f 77       	andi	r24, 0x7F	; 127
     5b6:	90 70       	andi	r25, 0x00	; 0
     5b8:	a0 70       	andi	r26, 0x00	; 0
     5ba:	b0 70       	andi	r27, 0x00	; 0
     5bc:	80 34       	cpi	r24, 0x40	; 64
     5be:	91 05       	cpc	r25, r1
     5c0:	a1 05       	cpc	r26, r1
     5c2:	b1 05       	cpc	r27, r1
     5c4:	61 f4       	brne	.+24     	; 0x5de <__stack+0x17f>
     5c6:	47 fd       	sbrc	r20, 7
     5c8:	0a c0       	rjmp	.+20     	; 0x5de <__stack+0x17f>
     5ca:	e1 14       	cp	r14, r1
     5cc:	f1 04       	cpc	r15, r1
     5ce:	01 05       	cpc	r16, r1
     5d0:	11 05       	cpc	r17, r1
     5d2:	29 f0       	breq	.+10     	; 0x5de <__stack+0x17f>
     5d4:	40 5c       	subi	r20, 0xC0	; 192
     5d6:	5f 4f       	sbci	r21, 0xFF	; 255
     5d8:	6f 4f       	sbci	r22, 0xFF	; 255
     5da:	7f 4f       	sbci	r23, 0xFF	; 255
     5dc:	40 78       	andi	r20, 0x80	; 128
     5de:	1a 8e       	std	Y+26, r1	; 0x1a
     5e0:	fe 17       	cp	r31, r30
     5e2:	11 f0       	breq	.+4      	; 0x5e8 <__stack+0x189>
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	8a 8f       	std	Y+26, r24	; 0x1a
     5e8:	4d 8f       	std	Y+29, r20	; 0x1d
     5ea:	5e 8f       	std	Y+30, r21	; 0x1e
     5ec:	6f 8f       	std	Y+31, r22	; 0x1f
     5ee:	78 a3       	std	Y+32, r23	; 0x20
     5f0:	83 e0       	ldi	r24, 0x03	; 3
     5f2:	89 8f       	std	Y+25, r24	; 0x19
     5f4:	ce 01       	movw	r24, r28
     5f6:	49 96       	adiw	r24, 0x19	; 25
     5f8:	4d d2       	rcall	.+1178   	; 0xa94 <__pack_f>
     5fa:	a0 96       	adiw	r28, 0x20	; 32
     5fc:	e2 e1       	ldi	r30, 0x12	; 18
     5fe:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__epilogue_restores__>

00000602 <__divsf3>:
     602:	a8 e1       	ldi	r26, 0x18	; 24
     604:	b0 e0       	ldi	r27, 0x00	; 0
     606:	e7 e0       	ldi	r30, 0x07	; 7
     608:	f3 e0       	ldi	r31, 0x03	; 3
     60a:	0c 94 fb 0f 	jmp	0x1ff6	; 0x1ff6 <__prologue_saves__+0x10>
     60e:	69 83       	std	Y+1, r22	; 0x01
     610:	7a 83       	std	Y+2, r23	; 0x02
     612:	8b 83       	std	Y+3, r24	; 0x03
     614:	9c 83       	std	Y+4, r25	; 0x04
     616:	2d 83       	std	Y+5, r18	; 0x05
     618:	3e 83       	std	Y+6, r19	; 0x06
     61a:	4f 83       	std	Y+7, r20	; 0x07
     61c:	58 87       	std	Y+8, r21	; 0x08
     61e:	b9 e0       	ldi	r27, 0x09	; 9
     620:	eb 2e       	mov	r14, r27
     622:	f1 2c       	mov	r15, r1
     624:	ec 0e       	add	r14, r28
     626:	fd 1e       	adc	r15, r29
     628:	ce 01       	movw	r24, r28
     62a:	01 96       	adiw	r24, 0x01	; 1
     62c:	b7 01       	movw	r22, r14
     62e:	07 d3       	rcall	.+1550   	; 0xc3e <__unpack_f>
     630:	8e 01       	movw	r16, r28
     632:	0f 5e       	subi	r16, 0xEF	; 239
     634:	1f 4f       	sbci	r17, 0xFF	; 255
     636:	ce 01       	movw	r24, r28
     638:	05 96       	adiw	r24, 0x05	; 5
     63a:	b8 01       	movw	r22, r16
     63c:	00 d3       	rcall	.+1536   	; 0xc3e <__unpack_f>
     63e:	29 85       	ldd	r18, Y+9	; 0x09
     640:	22 30       	cpi	r18, 0x02	; 2
     642:	08 f4       	brcc	.+2      	; 0x646 <__divsf3+0x44>
     644:	7e c0       	rjmp	.+252    	; 0x742 <__divsf3+0x140>
     646:	39 89       	ldd	r19, Y+17	; 0x11
     648:	32 30       	cpi	r19, 0x02	; 2
     64a:	10 f4       	brcc	.+4      	; 0x650 <__divsf3+0x4e>
     64c:	b8 01       	movw	r22, r16
     64e:	7c c0       	rjmp	.+248    	; 0x748 <__divsf3+0x146>
     650:	8a 85       	ldd	r24, Y+10	; 0x0a
     652:	9a 89       	ldd	r25, Y+18	; 0x12
     654:	89 27       	eor	r24, r25
     656:	8a 87       	std	Y+10, r24	; 0x0a
     658:	24 30       	cpi	r18, 0x04	; 4
     65a:	11 f0       	breq	.+4      	; 0x660 <__divsf3+0x5e>
     65c:	22 30       	cpi	r18, 0x02	; 2
     65e:	31 f4       	brne	.+12     	; 0x66c <__divsf3+0x6a>
     660:	23 17       	cp	r18, r19
     662:	09 f0       	breq	.+2      	; 0x666 <__divsf3+0x64>
     664:	6e c0       	rjmp	.+220    	; 0x742 <__divsf3+0x140>
     666:	68 e8       	ldi	r22, 0x88	; 136
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	6e c0       	rjmp	.+220    	; 0x748 <__divsf3+0x146>
     66c:	34 30       	cpi	r19, 0x04	; 4
     66e:	39 f4       	brne	.+14     	; 0x67e <__divsf3+0x7c>
     670:	1d 86       	std	Y+13, r1	; 0x0d
     672:	1e 86       	std	Y+14, r1	; 0x0e
     674:	1f 86       	std	Y+15, r1	; 0x0f
     676:	18 8a       	std	Y+16, r1	; 0x10
     678:	1c 86       	std	Y+12, r1	; 0x0c
     67a:	1b 86       	std	Y+11, r1	; 0x0b
     67c:	04 c0       	rjmp	.+8      	; 0x686 <__divsf3+0x84>
     67e:	32 30       	cpi	r19, 0x02	; 2
     680:	21 f4       	brne	.+8      	; 0x68a <__divsf3+0x88>
     682:	84 e0       	ldi	r24, 0x04	; 4
     684:	89 87       	std	Y+9, r24	; 0x09
     686:	b7 01       	movw	r22, r14
     688:	5f c0       	rjmp	.+190    	; 0x748 <__divsf3+0x146>
     68a:	2b 85       	ldd	r18, Y+11	; 0x0b
     68c:	3c 85       	ldd	r19, Y+12	; 0x0c
     68e:	8b 89       	ldd	r24, Y+19	; 0x13
     690:	9c 89       	ldd	r25, Y+20	; 0x14
     692:	28 1b       	sub	r18, r24
     694:	39 0b       	sbc	r19, r25
     696:	3c 87       	std	Y+12, r19	; 0x0c
     698:	2b 87       	std	Y+11, r18	; 0x0b
     69a:	ed 84       	ldd	r14, Y+13	; 0x0d
     69c:	fe 84       	ldd	r15, Y+14	; 0x0e
     69e:	0f 85       	ldd	r16, Y+15	; 0x0f
     6a0:	18 89       	ldd	r17, Y+16	; 0x10
     6a2:	ad 88       	ldd	r10, Y+21	; 0x15
     6a4:	be 88       	ldd	r11, Y+22	; 0x16
     6a6:	cf 88       	ldd	r12, Y+23	; 0x17
     6a8:	d8 8c       	ldd	r13, Y+24	; 0x18
     6aa:	ea 14       	cp	r14, r10
     6ac:	fb 04       	cpc	r15, r11
     6ae:	0c 05       	cpc	r16, r12
     6b0:	1d 05       	cpc	r17, r13
     6b2:	40 f4       	brcc	.+16     	; 0x6c4 <__divsf3+0xc2>
     6b4:	ee 0c       	add	r14, r14
     6b6:	ff 1c       	adc	r15, r15
     6b8:	00 1f       	adc	r16, r16
     6ba:	11 1f       	adc	r17, r17
     6bc:	21 50       	subi	r18, 0x01	; 1
     6be:	30 40       	sbci	r19, 0x00	; 0
     6c0:	3c 87       	std	Y+12, r19	; 0x0c
     6c2:	2b 87       	std	Y+11, r18	; 0x0b
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	40 e0       	ldi	r20, 0x00	; 0
     6ca:	50 e0       	ldi	r21, 0x00	; 0
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	a0 e0       	ldi	r26, 0x00	; 0
     6d2:	b0 e4       	ldi	r27, 0x40	; 64
     6d4:	60 e0       	ldi	r22, 0x00	; 0
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	ea 14       	cp	r14, r10
     6da:	fb 04       	cpc	r15, r11
     6dc:	0c 05       	cpc	r16, r12
     6de:	1d 05       	cpc	r17, r13
     6e0:	40 f0       	brcs	.+16     	; 0x6f2 <__divsf3+0xf0>
     6e2:	28 2b       	or	r18, r24
     6e4:	39 2b       	or	r19, r25
     6e6:	4a 2b       	or	r20, r26
     6e8:	5b 2b       	or	r21, r27
     6ea:	ea 18       	sub	r14, r10
     6ec:	fb 08       	sbc	r15, r11
     6ee:	0c 09       	sbc	r16, r12
     6f0:	1d 09       	sbc	r17, r13
     6f2:	b6 95       	lsr	r27
     6f4:	a7 95       	ror	r26
     6f6:	97 95       	ror	r25
     6f8:	87 95       	ror	r24
     6fa:	ee 0c       	add	r14, r14
     6fc:	ff 1c       	adc	r15, r15
     6fe:	00 1f       	adc	r16, r16
     700:	11 1f       	adc	r17, r17
     702:	6f 5f       	subi	r22, 0xFF	; 255
     704:	7f 4f       	sbci	r23, 0xFF	; 255
     706:	6f 31       	cpi	r22, 0x1F	; 31
     708:	71 05       	cpc	r23, r1
     70a:	31 f7       	brne	.-52     	; 0x6d8 <__divsf3+0xd6>
     70c:	da 01       	movw	r26, r20
     70e:	c9 01       	movw	r24, r18
     710:	8f 77       	andi	r24, 0x7F	; 127
     712:	90 70       	andi	r25, 0x00	; 0
     714:	a0 70       	andi	r26, 0x00	; 0
     716:	b0 70       	andi	r27, 0x00	; 0
     718:	80 34       	cpi	r24, 0x40	; 64
     71a:	91 05       	cpc	r25, r1
     71c:	a1 05       	cpc	r26, r1
     71e:	b1 05       	cpc	r27, r1
     720:	61 f4       	brne	.+24     	; 0x73a <__divsf3+0x138>
     722:	27 fd       	sbrc	r18, 7
     724:	0a c0       	rjmp	.+20     	; 0x73a <__divsf3+0x138>
     726:	e1 14       	cp	r14, r1
     728:	f1 04       	cpc	r15, r1
     72a:	01 05       	cpc	r16, r1
     72c:	11 05       	cpc	r17, r1
     72e:	29 f0       	breq	.+10     	; 0x73a <__divsf3+0x138>
     730:	20 5c       	subi	r18, 0xC0	; 192
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	4f 4f       	sbci	r20, 0xFF	; 255
     736:	5f 4f       	sbci	r21, 0xFF	; 255
     738:	20 78       	andi	r18, 0x80	; 128
     73a:	2d 87       	std	Y+13, r18	; 0x0d
     73c:	3e 87       	std	Y+14, r19	; 0x0e
     73e:	4f 87       	std	Y+15, r20	; 0x0f
     740:	58 8b       	std	Y+16, r21	; 0x10
     742:	be 01       	movw	r22, r28
     744:	67 5f       	subi	r22, 0xF7	; 247
     746:	7f 4f       	sbci	r23, 0xFF	; 255
     748:	cb 01       	movw	r24, r22
     74a:	a4 d1       	rcall	.+840    	; 0xa94 <__pack_f>
     74c:	68 96       	adiw	r28, 0x18	; 24
     74e:	ea e0       	ldi	r30, 0x0A	; 10
     750:	0c 94 17 10 	jmp	0x202e	; 0x202e <__epilogue_restores__+0x10>

00000754 <__gtsf2>:
     754:	a8 e1       	ldi	r26, 0x18	; 24
     756:	b0 e0       	ldi	r27, 0x00	; 0
     758:	e0 eb       	ldi	r30, 0xB0	; 176
     75a:	f3 e0       	ldi	r31, 0x03	; 3
     75c:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <__prologue_saves__+0x18>
     760:	69 83       	std	Y+1, r22	; 0x01
     762:	7a 83       	std	Y+2, r23	; 0x02
     764:	8b 83       	std	Y+3, r24	; 0x03
     766:	9c 83       	std	Y+4, r25	; 0x04
     768:	2d 83       	std	Y+5, r18	; 0x05
     76a:	3e 83       	std	Y+6, r19	; 0x06
     76c:	4f 83       	std	Y+7, r20	; 0x07
     76e:	58 87       	std	Y+8, r21	; 0x08
     770:	89 e0       	ldi	r24, 0x09	; 9
     772:	e8 2e       	mov	r14, r24
     774:	f1 2c       	mov	r15, r1
     776:	ec 0e       	add	r14, r28
     778:	fd 1e       	adc	r15, r29
     77a:	ce 01       	movw	r24, r28
     77c:	01 96       	adiw	r24, 0x01	; 1
     77e:	b7 01       	movw	r22, r14
     780:	5e d2       	rcall	.+1212   	; 0xc3e <__unpack_f>
     782:	8e 01       	movw	r16, r28
     784:	0f 5e       	subi	r16, 0xEF	; 239
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	ce 01       	movw	r24, r28
     78a:	05 96       	adiw	r24, 0x05	; 5
     78c:	b8 01       	movw	r22, r16
     78e:	57 d2       	rcall	.+1198   	; 0xc3e <__unpack_f>
     790:	89 85       	ldd	r24, Y+9	; 0x09
     792:	82 30       	cpi	r24, 0x02	; 2
     794:	38 f0       	brcs	.+14     	; 0x7a4 <__gtsf2+0x50>
     796:	89 89       	ldd	r24, Y+17	; 0x11
     798:	82 30       	cpi	r24, 0x02	; 2
     79a:	20 f0       	brcs	.+8      	; 0x7a4 <__gtsf2+0x50>
     79c:	c7 01       	movw	r24, r14
     79e:	b8 01       	movw	r22, r16
     7a0:	c6 d2       	rcall	.+1420   	; 0xd2e <__fpcmp_parts_f>
     7a2:	01 c0       	rjmp	.+2      	; 0x7a6 <__gtsf2+0x52>
     7a4:	8f ef       	ldi	r24, 0xFF	; 255
     7a6:	68 96       	adiw	r28, 0x18	; 24
     7a8:	e6 e0       	ldi	r30, 0x06	; 6
     7aa:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__epilogue_restores__+0x18>

000007ae <__gesf2>:
     7ae:	a8 e1       	ldi	r26, 0x18	; 24
     7b0:	b0 e0       	ldi	r27, 0x00	; 0
     7b2:	ed ed       	ldi	r30, 0xDD	; 221
     7b4:	f3 e0       	ldi	r31, 0x03	; 3
     7b6:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <__prologue_saves__+0x18>
     7ba:	69 83       	std	Y+1, r22	; 0x01
     7bc:	7a 83       	std	Y+2, r23	; 0x02
     7be:	8b 83       	std	Y+3, r24	; 0x03
     7c0:	9c 83       	std	Y+4, r25	; 0x04
     7c2:	2d 83       	std	Y+5, r18	; 0x05
     7c4:	3e 83       	std	Y+6, r19	; 0x06
     7c6:	4f 83       	std	Y+7, r20	; 0x07
     7c8:	58 87       	std	Y+8, r21	; 0x08
     7ca:	89 e0       	ldi	r24, 0x09	; 9
     7cc:	e8 2e       	mov	r14, r24
     7ce:	f1 2c       	mov	r15, r1
     7d0:	ec 0e       	add	r14, r28
     7d2:	fd 1e       	adc	r15, r29
     7d4:	ce 01       	movw	r24, r28
     7d6:	01 96       	adiw	r24, 0x01	; 1
     7d8:	b7 01       	movw	r22, r14
     7da:	31 d2       	rcall	.+1122   	; 0xc3e <__unpack_f>
     7dc:	8e 01       	movw	r16, r28
     7de:	0f 5e       	subi	r16, 0xEF	; 239
     7e0:	1f 4f       	sbci	r17, 0xFF	; 255
     7e2:	ce 01       	movw	r24, r28
     7e4:	05 96       	adiw	r24, 0x05	; 5
     7e6:	b8 01       	movw	r22, r16
     7e8:	2a d2       	rcall	.+1108   	; 0xc3e <__unpack_f>
     7ea:	89 85       	ldd	r24, Y+9	; 0x09
     7ec:	82 30       	cpi	r24, 0x02	; 2
     7ee:	38 f0       	brcs	.+14     	; 0x7fe <__gesf2+0x50>
     7f0:	89 89       	ldd	r24, Y+17	; 0x11
     7f2:	82 30       	cpi	r24, 0x02	; 2
     7f4:	20 f0       	brcs	.+8      	; 0x7fe <__gesf2+0x50>
     7f6:	c7 01       	movw	r24, r14
     7f8:	b8 01       	movw	r22, r16
     7fa:	99 d2       	rcall	.+1330   	; 0xd2e <__fpcmp_parts_f>
     7fc:	01 c0       	rjmp	.+2      	; 0x800 <__gesf2+0x52>
     7fe:	8f ef       	ldi	r24, 0xFF	; 255
     800:	68 96       	adiw	r28, 0x18	; 24
     802:	e6 e0       	ldi	r30, 0x06	; 6
     804:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__epilogue_restores__+0x18>

00000808 <__ltsf2>:
     808:	a8 e1       	ldi	r26, 0x18	; 24
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	ea e0       	ldi	r30, 0x0A	; 10
     80e:	f4 e0       	ldi	r31, 0x04	; 4
     810:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <__prologue_saves__+0x18>
     814:	69 83       	std	Y+1, r22	; 0x01
     816:	7a 83       	std	Y+2, r23	; 0x02
     818:	8b 83       	std	Y+3, r24	; 0x03
     81a:	9c 83       	std	Y+4, r25	; 0x04
     81c:	2d 83       	std	Y+5, r18	; 0x05
     81e:	3e 83       	std	Y+6, r19	; 0x06
     820:	4f 83       	std	Y+7, r20	; 0x07
     822:	58 87       	std	Y+8, r21	; 0x08
     824:	89 e0       	ldi	r24, 0x09	; 9
     826:	e8 2e       	mov	r14, r24
     828:	f1 2c       	mov	r15, r1
     82a:	ec 0e       	add	r14, r28
     82c:	fd 1e       	adc	r15, r29
     82e:	ce 01       	movw	r24, r28
     830:	01 96       	adiw	r24, 0x01	; 1
     832:	b7 01       	movw	r22, r14
     834:	04 d2       	rcall	.+1032   	; 0xc3e <__unpack_f>
     836:	8e 01       	movw	r16, r28
     838:	0f 5e       	subi	r16, 0xEF	; 239
     83a:	1f 4f       	sbci	r17, 0xFF	; 255
     83c:	ce 01       	movw	r24, r28
     83e:	05 96       	adiw	r24, 0x05	; 5
     840:	b8 01       	movw	r22, r16
     842:	fd d1       	rcall	.+1018   	; 0xc3e <__unpack_f>
     844:	89 85       	ldd	r24, Y+9	; 0x09
     846:	82 30       	cpi	r24, 0x02	; 2
     848:	38 f0       	brcs	.+14     	; 0x858 <__ltsf2+0x50>
     84a:	89 89       	ldd	r24, Y+17	; 0x11
     84c:	82 30       	cpi	r24, 0x02	; 2
     84e:	20 f0       	brcs	.+8      	; 0x858 <__ltsf2+0x50>
     850:	c7 01       	movw	r24, r14
     852:	b8 01       	movw	r22, r16
     854:	6c d2       	rcall	.+1240   	; 0xd2e <__fpcmp_parts_f>
     856:	01 c0       	rjmp	.+2      	; 0x85a <__ltsf2+0x52>
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	68 96       	adiw	r28, 0x18	; 24
     85c:	e6 e0       	ldi	r30, 0x06	; 6
     85e:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__epilogue_restores__+0x18>

00000862 <__fixsfsi>:
     862:	ac e0       	ldi	r26, 0x0C	; 12
     864:	b0 e0       	ldi	r27, 0x00	; 0
     866:	e7 e3       	ldi	r30, 0x37	; 55
     868:	f4 e0       	ldi	r31, 0x04	; 4
     86a:	0c 94 03 10 	jmp	0x2006	; 0x2006 <__prologue_saves__+0x20>
     86e:	69 83       	std	Y+1, r22	; 0x01
     870:	7a 83       	std	Y+2, r23	; 0x02
     872:	8b 83       	std	Y+3, r24	; 0x03
     874:	9c 83       	std	Y+4, r25	; 0x04
     876:	ce 01       	movw	r24, r28
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	be 01       	movw	r22, r28
     87c:	6b 5f       	subi	r22, 0xFB	; 251
     87e:	7f 4f       	sbci	r23, 0xFF	; 255
     880:	de d1       	rcall	.+956    	; 0xc3e <__unpack_f>
     882:	8d 81       	ldd	r24, Y+5	; 0x05
     884:	82 30       	cpi	r24, 0x02	; 2
     886:	61 f1       	breq	.+88     	; 0x8e0 <__fixsfsi+0x7e>
     888:	82 30       	cpi	r24, 0x02	; 2
     88a:	50 f1       	brcs	.+84     	; 0x8e0 <__fixsfsi+0x7e>
     88c:	84 30       	cpi	r24, 0x04	; 4
     88e:	21 f4       	brne	.+8      	; 0x898 <__fixsfsi+0x36>
     890:	8e 81       	ldd	r24, Y+6	; 0x06
     892:	88 23       	and	r24, r24
     894:	51 f1       	breq	.+84     	; 0x8ea <__fixsfsi+0x88>
     896:	2e c0       	rjmp	.+92     	; 0x8f4 <__fixsfsi+0x92>
     898:	2f 81       	ldd	r18, Y+7	; 0x07
     89a:	38 85       	ldd	r19, Y+8	; 0x08
     89c:	37 fd       	sbrc	r19, 7
     89e:	20 c0       	rjmp	.+64     	; 0x8e0 <__fixsfsi+0x7e>
     8a0:	6e 81       	ldd	r22, Y+6	; 0x06
     8a2:	2f 31       	cpi	r18, 0x1F	; 31
     8a4:	31 05       	cpc	r19, r1
     8a6:	1c f0       	brlt	.+6      	; 0x8ae <__fixsfsi+0x4c>
     8a8:	66 23       	and	r22, r22
     8aa:	f9 f0       	breq	.+62     	; 0x8ea <__fixsfsi+0x88>
     8ac:	23 c0       	rjmp	.+70     	; 0x8f4 <__fixsfsi+0x92>
     8ae:	8e e1       	ldi	r24, 0x1E	; 30
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	82 1b       	sub	r24, r18
     8b4:	93 0b       	sbc	r25, r19
     8b6:	29 85       	ldd	r18, Y+9	; 0x09
     8b8:	3a 85       	ldd	r19, Y+10	; 0x0a
     8ba:	4b 85       	ldd	r20, Y+11	; 0x0b
     8bc:	5c 85       	ldd	r21, Y+12	; 0x0c
     8be:	04 c0       	rjmp	.+8      	; 0x8c8 <__fixsfsi+0x66>
     8c0:	56 95       	lsr	r21
     8c2:	47 95       	ror	r20
     8c4:	37 95       	ror	r19
     8c6:	27 95       	ror	r18
     8c8:	8a 95       	dec	r24
     8ca:	d2 f7       	brpl	.-12     	; 0x8c0 <__fixsfsi+0x5e>
     8cc:	66 23       	and	r22, r22
     8ce:	b1 f0       	breq	.+44     	; 0x8fc <__fixsfsi+0x9a>
     8d0:	50 95       	com	r21
     8d2:	40 95       	com	r20
     8d4:	30 95       	com	r19
     8d6:	21 95       	neg	r18
     8d8:	3f 4f       	sbci	r19, 0xFF	; 255
     8da:	4f 4f       	sbci	r20, 0xFF	; 255
     8dc:	5f 4f       	sbci	r21, 0xFF	; 255
     8de:	0e c0       	rjmp	.+28     	; 0x8fc <__fixsfsi+0x9a>
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	40 e0       	ldi	r20, 0x00	; 0
     8e6:	50 e0       	ldi	r21, 0x00	; 0
     8e8:	09 c0       	rjmp	.+18     	; 0x8fc <__fixsfsi+0x9a>
     8ea:	2f ef       	ldi	r18, 0xFF	; 255
     8ec:	3f ef       	ldi	r19, 0xFF	; 255
     8ee:	4f ef       	ldi	r20, 0xFF	; 255
     8f0:	5f e7       	ldi	r21, 0x7F	; 127
     8f2:	04 c0       	rjmp	.+8      	; 0x8fc <__fixsfsi+0x9a>
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	40 e0       	ldi	r20, 0x00	; 0
     8fa:	50 e8       	ldi	r21, 0x80	; 128
     8fc:	b9 01       	movw	r22, r18
     8fe:	ca 01       	movw	r24, r20
     900:	2c 96       	adiw	r28, 0x0c	; 12
     902:	e2 e0       	ldi	r30, 0x02	; 2
     904:	0c 94 1f 10 	jmp	0x203e	; 0x203e <__epilogue_restores__+0x20>

00000908 <__floatunsisf>:
     908:	a8 e0       	ldi	r26, 0x08	; 8
     90a:	b0 e0       	ldi	r27, 0x00	; 0
     90c:	ea e8       	ldi	r30, 0x8A	; 138
     90e:	f4 e0       	ldi	r31, 0x04	; 4
     910:	0c 94 fb 0f 	jmp	0x1ff6	; 0x1ff6 <__prologue_saves__+0x10>
     914:	7b 01       	movw	r14, r22
     916:	8c 01       	movw	r16, r24
     918:	61 15       	cp	r22, r1
     91a:	71 05       	cpc	r23, r1
     91c:	81 05       	cpc	r24, r1
     91e:	91 05       	cpc	r25, r1
     920:	19 f4       	brne	.+6      	; 0x928 <__floatunsisf+0x20>
     922:	82 e0       	ldi	r24, 0x02	; 2
     924:	89 83       	std	Y+1, r24	; 0x01
     926:	5f c0       	rjmp	.+190    	; 0x9e6 <__floatunsisf+0xde>
     928:	83 e0       	ldi	r24, 0x03	; 3
     92a:	89 83       	std	Y+1, r24	; 0x01
     92c:	8e e1       	ldi	r24, 0x1E	; 30
     92e:	c8 2e       	mov	r12, r24
     930:	d1 2c       	mov	r13, r1
     932:	dc 82       	std	Y+4, r13	; 0x04
     934:	cb 82       	std	Y+3, r12	; 0x03
     936:	ed 82       	std	Y+5, r14	; 0x05
     938:	fe 82       	std	Y+6, r15	; 0x06
     93a:	0f 83       	std	Y+7, r16	; 0x07
     93c:	18 87       	std	Y+8, r17	; 0x08
     93e:	c8 01       	movw	r24, r16
     940:	b7 01       	movw	r22, r14
     942:	59 d0       	rcall	.+178    	; 0x9f6 <__clzsi2>
     944:	fc 01       	movw	r30, r24
     946:	31 97       	sbiw	r30, 0x01	; 1
     948:	f7 ff       	sbrs	r31, 7
     94a:	3b c0       	rjmp	.+118    	; 0x9c2 <__floatunsisf+0xba>
     94c:	22 27       	eor	r18, r18
     94e:	33 27       	eor	r19, r19
     950:	2e 1b       	sub	r18, r30
     952:	3f 0b       	sbc	r19, r31
     954:	57 01       	movw	r10, r14
     956:	68 01       	movw	r12, r16
     958:	02 2e       	mov	r0, r18
     95a:	04 c0       	rjmp	.+8      	; 0x964 <__floatunsisf+0x5c>
     95c:	d6 94       	lsr	r13
     95e:	c7 94       	ror	r12
     960:	b7 94       	ror	r11
     962:	a7 94       	ror	r10
     964:	0a 94       	dec	r0
     966:	d2 f7       	brpl	.-12     	; 0x95c <__floatunsisf+0x54>
     968:	40 e0       	ldi	r20, 0x00	; 0
     96a:	50 e0       	ldi	r21, 0x00	; 0
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e0       	ldi	r26, 0x00	; 0
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	04 c0       	rjmp	.+8      	; 0x982 <__floatunsisf+0x7a>
     97a:	88 0f       	add	r24, r24
     97c:	99 1f       	adc	r25, r25
     97e:	aa 1f       	adc	r26, r26
     980:	bb 1f       	adc	r27, r27
     982:	2a 95       	dec	r18
     984:	d2 f7       	brpl	.-12     	; 0x97a <__floatunsisf+0x72>
     986:	01 97       	sbiw	r24, 0x01	; 1
     988:	a1 09       	sbc	r26, r1
     98a:	b1 09       	sbc	r27, r1
     98c:	8e 21       	and	r24, r14
     98e:	9f 21       	and	r25, r15
     990:	a0 23       	and	r26, r16
     992:	b1 23       	and	r27, r17
     994:	00 97       	sbiw	r24, 0x00	; 0
     996:	a1 05       	cpc	r26, r1
     998:	b1 05       	cpc	r27, r1
     99a:	21 f0       	breq	.+8      	; 0x9a4 <__floatunsisf+0x9c>
     99c:	41 e0       	ldi	r20, 0x01	; 1
     99e:	50 e0       	ldi	r21, 0x00	; 0
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	4a 29       	or	r20, r10
     9a6:	5b 29       	or	r21, r11
     9a8:	6c 29       	or	r22, r12
     9aa:	7d 29       	or	r23, r13
     9ac:	4d 83       	std	Y+5, r20	; 0x05
     9ae:	5e 83       	std	Y+6, r21	; 0x06
     9b0:	6f 83       	std	Y+7, r22	; 0x07
     9b2:	78 87       	std	Y+8, r23	; 0x08
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	8e 1b       	sub	r24, r30
     9ba:	9f 0b       	sbc	r25, r31
     9bc:	9c 83       	std	Y+4, r25	; 0x04
     9be:	8b 83       	std	Y+3, r24	; 0x03
     9c0:	12 c0       	rjmp	.+36     	; 0x9e6 <__floatunsisf+0xde>
     9c2:	30 97       	sbiw	r30, 0x00	; 0
     9c4:	81 f0       	breq	.+32     	; 0x9e6 <__floatunsisf+0xde>
     9c6:	0e 2e       	mov	r0, r30
     9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <__floatunsisf+0xca>
     9ca:	ee 0c       	add	r14, r14
     9cc:	ff 1c       	adc	r15, r15
     9ce:	00 1f       	adc	r16, r16
     9d0:	11 1f       	adc	r17, r17
     9d2:	0a 94       	dec	r0
     9d4:	d2 f7       	brpl	.-12     	; 0x9ca <__floatunsisf+0xc2>
     9d6:	ed 82       	std	Y+5, r14	; 0x05
     9d8:	fe 82       	std	Y+6, r15	; 0x06
     9da:	0f 83       	std	Y+7, r16	; 0x07
     9dc:	18 87       	std	Y+8, r17	; 0x08
     9de:	ce 1a       	sub	r12, r30
     9e0:	df 0a       	sbc	r13, r31
     9e2:	dc 82       	std	Y+4, r13	; 0x04
     9e4:	cb 82       	std	Y+3, r12	; 0x03
     9e6:	1a 82       	std	Y+2, r1	; 0x02
     9e8:	ce 01       	movw	r24, r28
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	53 d0       	rcall	.+166    	; 0xa94 <__pack_f>
     9ee:	28 96       	adiw	r28, 0x08	; 8
     9f0:	ea e0       	ldi	r30, 0x0A	; 10
     9f2:	0c 94 17 10 	jmp	0x202e	; 0x202e <__epilogue_restores__+0x10>

000009f6 <__clzsi2>:
     9f6:	ef 92       	push	r14
     9f8:	ff 92       	push	r15
     9fa:	0f 93       	push	r16
     9fc:	1f 93       	push	r17
     9fe:	7b 01       	movw	r14, r22
     a00:	8c 01       	movw	r16, r24
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	e8 16       	cp	r14, r24
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	f8 06       	cpc	r15, r24
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	08 07       	cpc	r16, r24
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	18 07       	cpc	r17, r24
     a12:	88 f4       	brcc	.+34     	; 0xa36 <__clzsi2+0x40>
     a14:	8f ef       	ldi	r24, 0xFF	; 255
     a16:	e8 16       	cp	r14, r24
     a18:	f1 04       	cpc	r15, r1
     a1a:	01 05       	cpc	r16, r1
     a1c:	11 05       	cpc	r17, r1
     a1e:	31 f0       	breq	.+12     	; 0xa2c <__clzsi2+0x36>
     a20:	28 f0       	brcs	.+10     	; 0xa2c <__clzsi2+0x36>
     a22:	88 e0       	ldi	r24, 0x08	; 8
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	a0 e0       	ldi	r26, 0x00	; 0
     a28:	b0 e0       	ldi	r27, 0x00	; 0
     a2a:	17 c0       	rjmp	.+46     	; 0xa5a <__clzsi2+0x64>
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	a0 e0       	ldi	r26, 0x00	; 0
     a32:	b0 e0       	ldi	r27, 0x00	; 0
     a34:	12 c0       	rjmp	.+36     	; 0xa5a <__clzsi2+0x64>
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	e8 16       	cp	r14, r24
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	f8 06       	cpc	r15, r24
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	08 07       	cpc	r16, r24
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	18 07       	cpc	r17, r24
     a46:	28 f0       	brcs	.+10     	; 0xa52 <__clzsi2+0x5c>
     a48:	88 e1       	ldi	r24, 0x18	; 24
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	a0 e0       	ldi	r26, 0x00	; 0
     a4e:	b0 e0       	ldi	r27, 0x00	; 0
     a50:	04 c0       	rjmp	.+8      	; 0xa5a <__clzsi2+0x64>
     a52:	80 e1       	ldi	r24, 0x10	; 16
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	a0 e0       	ldi	r26, 0x00	; 0
     a58:	b0 e0       	ldi	r27, 0x00	; 0
     a5a:	20 e2       	ldi	r18, 0x20	; 32
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e0       	ldi	r21, 0x00	; 0
     a62:	28 1b       	sub	r18, r24
     a64:	39 0b       	sbc	r19, r25
     a66:	4a 0b       	sbc	r20, r26
     a68:	5b 0b       	sbc	r21, r27
     a6a:	04 c0       	rjmp	.+8      	; 0xa74 <__clzsi2+0x7e>
     a6c:	16 95       	lsr	r17
     a6e:	07 95       	ror	r16
     a70:	f7 94       	ror	r15
     a72:	e7 94       	ror	r14
     a74:	8a 95       	dec	r24
     a76:	d2 f7       	brpl	.-12     	; 0xa6c <__clzsi2+0x76>
     a78:	f7 01       	movw	r30, r14
     a7a:	e0 57       	subi	r30, 0x70	; 112
     a7c:	ff 4f       	sbci	r31, 0xFF	; 255
     a7e:	80 81       	ld	r24, Z
     a80:	28 1b       	sub	r18, r24
     a82:	31 09       	sbc	r19, r1
     a84:	41 09       	sbc	r20, r1
     a86:	51 09       	sbc	r21, r1
     a88:	c9 01       	movw	r24, r18
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	ff 90       	pop	r15
     a90:	ef 90       	pop	r14
     a92:	08 95       	ret

00000a94 <__pack_f>:
     a94:	df 92       	push	r13
     a96:	ef 92       	push	r14
     a98:	ff 92       	push	r15
     a9a:	0f 93       	push	r16
     a9c:	1f 93       	push	r17
     a9e:	fc 01       	movw	r30, r24
     aa0:	e4 80       	ldd	r14, Z+4	; 0x04
     aa2:	f5 80       	ldd	r15, Z+5	; 0x05
     aa4:	06 81       	ldd	r16, Z+6	; 0x06
     aa6:	17 81       	ldd	r17, Z+7	; 0x07
     aa8:	d1 80       	ldd	r13, Z+1	; 0x01
     aaa:	80 81       	ld	r24, Z
     aac:	82 30       	cpi	r24, 0x02	; 2
     aae:	48 f4       	brcc	.+18     	; 0xac2 <__pack_f+0x2e>
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	a0 e1       	ldi	r26, 0x10	; 16
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
     ab8:	e8 2a       	or	r14, r24
     aba:	f9 2a       	or	r15, r25
     abc:	0a 2b       	or	r16, r26
     abe:	1b 2b       	or	r17, r27
     ac0:	a5 c0       	rjmp	.+330    	; 0xc0c <__pack_f+0x178>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	09 f4       	brne	.+2      	; 0xac8 <__pack_f+0x34>
     ac6:	9f c0       	rjmp	.+318    	; 0xc06 <__pack_f+0x172>
     ac8:	82 30       	cpi	r24, 0x02	; 2
     aca:	21 f4       	brne	.+8      	; 0xad4 <__pack_f+0x40>
     acc:	ee 24       	eor	r14, r14
     ace:	ff 24       	eor	r15, r15
     ad0:	87 01       	movw	r16, r14
     ad2:	05 c0       	rjmp	.+10     	; 0xade <__pack_f+0x4a>
     ad4:	e1 14       	cp	r14, r1
     ad6:	f1 04       	cpc	r15, r1
     ad8:	01 05       	cpc	r16, r1
     ada:	11 05       	cpc	r17, r1
     adc:	19 f4       	brne	.+6      	; 0xae4 <__pack_f+0x50>
     ade:	e0 e0       	ldi	r30, 0x00	; 0
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	96 c0       	rjmp	.+300    	; 0xc10 <__pack_f+0x17c>
     ae4:	62 81       	ldd	r22, Z+2	; 0x02
     ae6:	73 81       	ldd	r23, Z+3	; 0x03
     ae8:	9f ef       	ldi	r25, 0xFF	; 255
     aea:	62 38       	cpi	r22, 0x82	; 130
     aec:	79 07       	cpc	r23, r25
     aee:	0c f0       	brlt	.+2      	; 0xaf2 <__pack_f+0x5e>
     af0:	5b c0       	rjmp	.+182    	; 0xba8 <__pack_f+0x114>
     af2:	22 e8       	ldi	r18, 0x82	; 130
     af4:	3f ef       	ldi	r19, 0xFF	; 255
     af6:	26 1b       	sub	r18, r22
     af8:	37 0b       	sbc	r19, r23
     afa:	2a 31       	cpi	r18, 0x1A	; 26
     afc:	31 05       	cpc	r19, r1
     afe:	2c f0       	brlt	.+10     	; 0xb0a <__pack_f+0x76>
     b00:	20 e0       	ldi	r18, 0x00	; 0
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	40 e0       	ldi	r20, 0x00	; 0
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	2a c0       	rjmp	.+84     	; 0xb5e <__pack_f+0xca>
     b0a:	b8 01       	movw	r22, r16
     b0c:	a7 01       	movw	r20, r14
     b0e:	02 2e       	mov	r0, r18
     b10:	04 c0       	rjmp	.+8      	; 0xb1a <__pack_f+0x86>
     b12:	76 95       	lsr	r23
     b14:	67 95       	ror	r22
     b16:	57 95       	ror	r21
     b18:	47 95       	ror	r20
     b1a:	0a 94       	dec	r0
     b1c:	d2 f7       	brpl	.-12     	; 0xb12 <__pack_f+0x7e>
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	b0 e0       	ldi	r27, 0x00	; 0
     b26:	04 c0       	rjmp	.+8      	; 0xb30 <__pack_f+0x9c>
     b28:	88 0f       	add	r24, r24
     b2a:	99 1f       	adc	r25, r25
     b2c:	aa 1f       	adc	r26, r26
     b2e:	bb 1f       	adc	r27, r27
     b30:	2a 95       	dec	r18
     b32:	d2 f7       	brpl	.-12     	; 0xb28 <__pack_f+0x94>
     b34:	01 97       	sbiw	r24, 0x01	; 1
     b36:	a1 09       	sbc	r26, r1
     b38:	b1 09       	sbc	r27, r1
     b3a:	8e 21       	and	r24, r14
     b3c:	9f 21       	and	r25, r15
     b3e:	a0 23       	and	r26, r16
     b40:	b1 23       	and	r27, r17
     b42:	00 97       	sbiw	r24, 0x00	; 0
     b44:	a1 05       	cpc	r26, r1
     b46:	b1 05       	cpc	r27, r1
     b48:	21 f0       	breq	.+8      	; 0xb52 <__pack_f+0xbe>
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	a0 e0       	ldi	r26, 0x00	; 0
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	9a 01       	movw	r18, r20
     b54:	ab 01       	movw	r20, r22
     b56:	28 2b       	or	r18, r24
     b58:	39 2b       	or	r19, r25
     b5a:	4a 2b       	or	r20, r26
     b5c:	5b 2b       	or	r21, r27
     b5e:	da 01       	movw	r26, r20
     b60:	c9 01       	movw	r24, r18
     b62:	8f 77       	andi	r24, 0x7F	; 127
     b64:	90 70       	andi	r25, 0x00	; 0
     b66:	a0 70       	andi	r26, 0x00	; 0
     b68:	b0 70       	andi	r27, 0x00	; 0
     b6a:	80 34       	cpi	r24, 0x40	; 64
     b6c:	91 05       	cpc	r25, r1
     b6e:	a1 05       	cpc	r26, r1
     b70:	b1 05       	cpc	r27, r1
     b72:	39 f4       	brne	.+14     	; 0xb82 <__pack_f+0xee>
     b74:	27 ff       	sbrs	r18, 7
     b76:	09 c0       	rjmp	.+18     	; 0xb8a <__pack_f+0xf6>
     b78:	20 5c       	subi	r18, 0xC0	; 192
     b7a:	3f 4f       	sbci	r19, 0xFF	; 255
     b7c:	4f 4f       	sbci	r20, 0xFF	; 255
     b7e:	5f 4f       	sbci	r21, 0xFF	; 255
     b80:	04 c0       	rjmp	.+8      	; 0xb8a <__pack_f+0xf6>
     b82:	21 5c       	subi	r18, 0xC1	; 193
     b84:	3f 4f       	sbci	r19, 0xFF	; 255
     b86:	4f 4f       	sbci	r20, 0xFF	; 255
     b88:	5f 4f       	sbci	r21, 0xFF	; 255
     b8a:	e0 e0       	ldi	r30, 0x00	; 0
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	20 30       	cpi	r18, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	3a 07       	cpc	r19, r26
     b94:	a0 e0       	ldi	r26, 0x00	; 0
     b96:	4a 07       	cpc	r20, r26
     b98:	a0 e4       	ldi	r26, 0x40	; 64
     b9a:	5a 07       	cpc	r21, r26
     b9c:	10 f0       	brcs	.+4      	; 0xba2 <__pack_f+0x10e>
     b9e:	e1 e0       	ldi	r30, 0x01	; 1
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	79 01       	movw	r14, r18
     ba4:	8a 01       	movw	r16, r20
     ba6:	27 c0       	rjmp	.+78     	; 0xbf6 <__pack_f+0x162>
     ba8:	60 38       	cpi	r22, 0x80	; 128
     baa:	71 05       	cpc	r23, r1
     bac:	64 f5       	brge	.+88     	; 0xc06 <__pack_f+0x172>
     bae:	fb 01       	movw	r30, r22
     bb0:	e1 58       	subi	r30, 0x81	; 129
     bb2:	ff 4f       	sbci	r31, 0xFF	; 255
     bb4:	d8 01       	movw	r26, r16
     bb6:	c7 01       	movw	r24, r14
     bb8:	8f 77       	andi	r24, 0x7F	; 127
     bba:	90 70       	andi	r25, 0x00	; 0
     bbc:	a0 70       	andi	r26, 0x00	; 0
     bbe:	b0 70       	andi	r27, 0x00	; 0
     bc0:	80 34       	cpi	r24, 0x40	; 64
     bc2:	91 05       	cpc	r25, r1
     bc4:	a1 05       	cpc	r26, r1
     bc6:	b1 05       	cpc	r27, r1
     bc8:	39 f4       	brne	.+14     	; 0xbd8 <__pack_f+0x144>
     bca:	e7 fe       	sbrs	r14, 7
     bcc:	0d c0       	rjmp	.+26     	; 0xbe8 <__pack_f+0x154>
     bce:	80 e4       	ldi	r24, 0x40	; 64
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	04 c0       	rjmp	.+8      	; 0xbe0 <__pack_f+0x14c>
     bd8:	8f e3       	ldi	r24, 0x3F	; 63
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	a0 e0       	ldi	r26, 0x00	; 0
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e8 0e       	add	r14, r24
     be2:	f9 1e       	adc	r15, r25
     be4:	0a 1f       	adc	r16, r26
     be6:	1b 1f       	adc	r17, r27
     be8:	17 ff       	sbrs	r17, 7
     bea:	05 c0       	rjmp	.+10     	; 0xbf6 <__pack_f+0x162>
     bec:	16 95       	lsr	r17
     bee:	07 95       	ror	r16
     bf0:	f7 94       	ror	r15
     bf2:	e7 94       	ror	r14
     bf4:	31 96       	adiw	r30, 0x01	; 1
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	16 95       	lsr	r17
     bfa:	07 95       	ror	r16
     bfc:	f7 94       	ror	r15
     bfe:	e7 94       	ror	r14
     c00:	8a 95       	dec	r24
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <__pack_f+0x164>
     c04:	05 c0       	rjmp	.+10     	; 0xc10 <__pack_f+0x17c>
     c06:	ee 24       	eor	r14, r14
     c08:	ff 24       	eor	r15, r15
     c0a:	87 01       	movw	r16, r14
     c0c:	ef ef       	ldi	r30, 0xFF	; 255
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	6e 2f       	mov	r22, r30
     c12:	67 95       	ror	r22
     c14:	66 27       	eor	r22, r22
     c16:	67 95       	ror	r22
     c18:	90 2f       	mov	r25, r16
     c1a:	9f 77       	andi	r25, 0x7F	; 127
     c1c:	d7 94       	ror	r13
     c1e:	dd 24       	eor	r13, r13
     c20:	d7 94       	ror	r13
     c22:	8e 2f       	mov	r24, r30
     c24:	86 95       	lsr	r24
     c26:	49 2f       	mov	r20, r25
     c28:	46 2b       	or	r20, r22
     c2a:	58 2f       	mov	r21, r24
     c2c:	5d 29       	or	r21, r13
     c2e:	b7 01       	movw	r22, r14
     c30:	ca 01       	movw	r24, r20
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	ff 90       	pop	r15
     c38:	ef 90       	pop	r14
     c3a:	df 90       	pop	r13
     c3c:	08 95       	ret

00000c3e <__unpack_f>:
     c3e:	fc 01       	movw	r30, r24
     c40:	db 01       	movw	r26, r22
     c42:	40 81       	ld	r20, Z
     c44:	51 81       	ldd	r21, Z+1	; 0x01
     c46:	22 81       	ldd	r18, Z+2	; 0x02
     c48:	62 2f       	mov	r22, r18
     c4a:	6f 77       	andi	r22, 0x7F	; 127
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	22 1f       	adc	r18, r18
     c50:	22 27       	eor	r18, r18
     c52:	22 1f       	adc	r18, r18
     c54:	93 81       	ldd	r25, Z+3	; 0x03
     c56:	89 2f       	mov	r24, r25
     c58:	88 0f       	add	r24, r24
     c5a:	82 2b       	or	r24, r18
     c5c:	28 2f       	mov	r18, r24
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	99 1f       	adc	r25, r25
     c62:	99 27       	eor	r25, r25
     c64:	99 1f       	adc	r25, r25
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	9c 93       	st	X, r25
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	21 15       	cp	r18, r1
     c6e:	31 05       	cpc	r19, r1
     c70:	a9 f5       	brne	.+106    	; 0xcdc <__unpack_f+0x9e>
     c72:	41 15       	cp	r20, r1
     c74:	51 05       	cpc	r21, r1
     c76:	61 05       	cpc	r22, r1
     c78:	71 05       	cpc	r23, r1
     c7a:	11 f4       	brne	.+4      	; 0xc80 <__unpack_f+0x42>
     c7c:	82 e0       	ldi	r24, 0x02	; 2
     c7e:	37 c0       	rjmp	.+110    	; 0xcee <__unpack_f+0xb0>
     c80:	82 e8       	ldi	r24, 0x82	; 130
     c82:	9f ef       	ldi	r25, 0xFF	; 255
     c84:	13 96       	adiw	r26, 0x03	; 3
     c86:	9c 93       	st	X, r25
     c88:	8e 93       	st	-X, r24
     c8a:	12 97       	sbiw	r26, 0x02	; 2
     c8c:	9a 01       	movw	r18, r20
     c8e:	ab 01       	movw	r20, r22
     c90:	67 e0       	ldi	r22, 0x07	; 7
     c92:	22 0f       	add	r18, r18
     c94:	33 1f       	adc	r19, r19
     c96:	44 1f       	adc	r20, r20
     c98:	55 1f       	adc	r21, r21
     c9a:	6a 95       	dec	r22
     c9c:	d1 f7       	brne	.-12     	; 0xc92 <__unpack_f+0x54>
     c9e:	83 e0       	ldi	r24, 0x03	; 3
     ca0:	8c 93       	st	X, r24
     ca2:	0d c0       	rjmp	.+26     	; 0xcbe <__unpack_f+0x80>
     ca4:	22 0f       	add	r18, r18
     ca6:	33 1f       	adc	r19, r19
     ca8:	44 1f       	adc	r20, r20
     caa:	55 1f       	adc	r21, r21
     cac:	12 96       	adiw	r26, 0x02	; 2
     cae:	8d 91       	ld	r24, X+
     cb0:	9c 91       	ld	r25, X
     cb2:	13 97       	sbiw	r26, 0x03	; 3
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	13 96       	adiw	r26, 0x03	; 3
     cb8:	9c 93       	st	X, r25
     cba:	8e 93       	st	-X, r24
     cbc:	12 97       	sbiw	r26, 0x02	; 2
     cbe:	20 30       	cpi	r18, 0x00	; 0
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	38 07       	cpc	r19, r24
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	48 07       	cpc	r20, r24
     cc8:	80 e4       	ldi	r24, 0x40	; 64
     cca:	58 07       	cpc	r21, r24
     ccc:	58 f3       	brcs	.-42     	; 0xca4 <__unpack_f+0x66>
     cce:	14 96       	adiw	r26, 0x04	; 4
     cd0:	2d 93       	st	X+, r18
     cd2:	3d 93       	st	X+, r19
     cd4:	4d 93       	st	X+, r20
     cd6:	5c 93       	st	X, r21
     cd8:	17 97       	sbiw	r26, 0x07	; 7
     cda:	08 95       	ret
     cdc:	2f 3f       	cpi	r18, 0xFF	; 255
     cde:	31 05       	cpc	r19, r1
     ce0:	79 f4       	brne	.+30     	; 0xd00 <__unpack_f+0xc2>
     ce2:	41 15       	cp	r20, r1
     ce4:	51 05       	cpc	r21, r1
     ce6:	61 05       	cpc	r22, r1
     ce8:	71 05       	cpc	r23, r1
     cea:	19 f4       	brne	.+6      	; 0xcf2 <__unpack_f+0xb4>
     cec:	84 e0       	ldi	r24, 0x04	; 4
     cee:	8c 93       	st	X, r24
     cf0:	08 95       	ret
     cf2:	64 ff       	sbrs	r22, 4
     cf4:	03 c0       	rjmp	.+6      	; 0xcfc <__unpack_f+0xbe>
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	8c 93       	st	X, r24
     cfa:	12 c0       	rjmp	.+36     	; 0xd20 <__unpack_f+0xe2>
     cfc:	1c 92       	st	X, r1
     cfe:	10 c0       	rjmp	.+32     	; 0xd20 <__unpack_f+0xe2>
     d00:	2f 57       	subi	r18, 0x7F	; 127
     d02:	30 40       	sbci	r19, 0x00	; 0
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	3c 93       	st	X, r19
     d08:	2e 93       	st	-X, r18
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	83 e0       	ldi	r24, 0x03	; 3
     d0e:	8c 93       	st	X, r24
     d10:	87 e0       	ldi	r24, 0x07	; 7
     d12:	44 0f       	add	r20, r20
     d14:	55 1f       	adc	r21, r21
     d16:	66 1f       	adc	r22, r22
     d18:	77 1f       	adc	r23, r23
     d1a:	8a 95       	dec	r24
     d1c:	d1 f7       	brne	.-12     	; 0xd12 <__unpack_f+0xd4>
     d1e:	70 64       	ori	r23, 0x40	; 64
     d20:	14 96       	adiw	r26, 0x04	; 4
     d22:	4d 93       	st	X+, r20
     d24:	5d 93       	st	X+, r21
     d26:	6d 93       	st	X+, r22
     d28:	7c 93       	st	X, r23
     d2a:	17 97       	sbiw	r26, 0x07	; 7
     d2c:	08 95       	ret

00000d2e <__fpcmp_parts_f>:
     d2e:	1f 93       	push	r17
     d30:	dc 01       	movw	r26, r24
     d32:	fb 01       	movw	r30, r22
     d34:	9c 91       	ld	r25, X
     d36:	92 30       	cpi	r25, 0x02	; 2
     d38:	08 f4       	brcc	.+2      	; 0xd3c <__fpcmp_parts_f+0xe>
     d3a:	47 c0       	rjmp	.+142    	; 0xdca <__fpcmp_parts_f+0x9c>
     d3c:	80 81       	ld	r24, Z
     d3e:	82 30       	cpi	r24, 0x02	; 2
     d40:	08 f4       	brcc	.+2      	; 0xd44 <__fpcmp_parts_f+0x16>
     d42:	43 c0       	rjmp	.+134    	; 0xdca <__fpcmp_parts_f+0x9c>
     d44:	94 30       	cpi	r25, 0x04	; 4
     d46:	51 f4       	brne	.+20     	; 0xd5c <__fpcmp_parts_f+0x2e>
     d48:	11 96       	adiw	r26, 0x01	; 1
     d4a:	1c 91       	ld	r17, X
     d4c:	84 30       	cpi	r24, 0x04	; 4
     d4e:	99 f5       	brne	.+102    	; 0xdb6 <__fpcmp_parts_f+0x88>
     d50:	81 81       	ldd	r24, Z+1	; 0x01
     d52:	68 2f       	mov	r22, r24
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	61 1b       	sub	r22, r17
     d58:	71 09       	sbc	r23, r1
     d5a:	3f c0       	rjmp	.+126    	; 0xdda <__fpcmp_parts_f+0xac>
     d5c:	84 30       	cpi	r24, 0x04	; 4
     d5e:	21 f0       	breq	.+8      	; 0xd68 <__fpcmp_parts_f+0x3a>
     d60:	92 30       	cpi	r25, 0x02	; 2
     d62:	31 f4       	brne	.+12     	; 0xd70 <__fpcmp_parts_f+0x42>
     d64:	82 30       	cpi	r24, 0x02	; 2
     d66:	b9 f1       	breq	.+110    	; 0xdd6 <__fpcmp_parts_f+0xa8>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	88 23       	and	r24, r24
     d6c:	89 f1       	breq	.+98     	; 0xdd0 <__fpcmp_parts_f+0xa2>
     d6e:	2d c0       	rjmp	.+90     	; 0xdca <__fpcmp_parts_f+0x9c>
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	1c 91       	ld	r17, X
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	82 30       	cpi	r24, 0x02	; 2
     d78:	f1 f0       	breq	.+60     	; 0xdb6 <__fpcmp_parts_f+0x88>
     d7a:	81 81       	ldd	r24, Z+1	; 0x01
     d7c:	18 17       	cp	r17, r24
     d7e:	d9 f4       	brne	.+54     	; 0xdb6 <__fpcmp_parts_f+0x88>
     d80:	12 96       	adiw	r26, 0x02	; 2
     d82:	2d 91       	ld	r18, X+
     d84:	3c 91       	ld	r19, X
     d86:	13 97       	sbiw	r26, 0x03	; 3
     d88:	82 81       	ldd	r24, Z+2	; 0x02
     d8a:	93 81       	ldd	r25, Z+3	; 0x03
     d8c:	82 17       	cp	r24, r18
     d8e:	93 07       	cpc	r25, r19
     d90:	94 f0       	brlt	.+36     	; 0xdb6 <__fpcmp_parts_f+0x88>
     d92:	28 17       	cp	r18, r24
     d94:	39 07       	cpc	r19, r25
     d96:	bc f0       	brlt	.+46     	; 0xdc6 <__fpcmp_parts_f+0x98>
     d98:	14 96       	adiw	r26, 0x04	; 4
     d9a:	8d 91       	ld	r24, X+
     d9c:	9d 91       	ld	r25, X+
     d9e:	0d 90       	ld	r0, X+
     da0:	bc 91       	ld	r27, X
     da2:	a0 2d       	mov	r26, r0
     da4:	24 81       	ldd	r18, Z+4	; 0x04
     da6:	35 81       	ldd	r19, Z+5	; 0x05
     da8:	46 81       	ldd	r20, Z+6	; 0x06
     daa:	57 81       	ldd	r21, Z+7	; 0x07
     dac:	28 17       	cp	r18, r24
     dae:	39 07       	cpc	r19, r25
     db0:	4a 07       	cpc	r20, r26
     db2:	5b 07       	cpc	r21, r27
     db4:	18 f4       	brcc	.+6      	; 0xdbc <__fpcmp_parts_f+0x8e>
     db6:	11 23       	and	r17, r17
     db8:	41 f0       	breq	.+16     	; 0xdca <__fpcmp_parts_f+0x9c>
     dba:	0a c0       	rjmp	.+20     	; 0xdd0 <__fpcmp_parts_f+0xa2>
     dbc:	82 17       	cp	r24, r18
     dbe:	93 07       	cpc	r25, r19
     dc0:	a4 07       	cpc	r26, r20
     dc2:	b5 07       	cpc	r27, r21
     dc4:	40 f4       	brcc	.+16     	; 0xdd6 <__fpcmp_parts_f+0xa8>
     dc6:	11 23       	and	r17, r17
     dc8:	19 f0       	breq	.+6      	; 0xdd0 <__fpcmp_parts_f+0xa2>
     dca:	61 e0       	ldi	r22, 0x01	; 1
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	05 c0       	rjmp	.+10     	; 0xdda <__fpcmp_parts_f+0xac>
     dd0:	6f ef       	ldi	r22, 0xFF	; 255
     dd2:	7f ef       	ldi	r23, 0xFF	; 255
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <__fpcmp_parts_f+0xac>
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	cb 01       	movw	r24, r22
     ddc:	1f 91       	pop	r17
     dde:	08 95       	ret

00000de0 <ADC_init>:

#include "adc.h"


void ADC_init(const ADC_ConfigType * Config_Ptr)
{
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	00 d0       	rcall	.+0      	; 0xde6 <ADC_init+0x6>
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
     dea:	9a 83       	std	Y+2, r25	; 0x02
     dec:	89 83       	std	Y+1, r24	; 0x01

	ADMUX = 0;
     dee:	e7 e2       	ldi	r30, 0x27	; 39
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	10 82       	st	Z, r1
	/*configure to operate using the reference voltage*/
	ADMUX |= (Config_Ptr->ref_volt << REFS0);
     df4:	a7 e2       	ldi	r26, 0x27	; 39
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e7 e2       	ldi	r30, 0x27	; 39
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	28 2f       	mov	r18, r24
     e00:	e9 81       	ldd	r30, Y+1	; 0x01
     e02:	fa 81       	ldd	r31, Y+2	; 0x02
     e04:	80 81       	ld	r24, Z
     e06:	88 2f       	mov	r24, r24
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	00 24       	eor	r0, r0
     e0c:	96 95       	lsr	r25
     e0e:	87 95       	ror	r24
     e10:	07 94       	ror	r0
     e12:	96 95       	lsr	r25
     e14:	87 95       	ror	r24
     e16:	07 94       	ror	r0
     e18:	98 2f       	mov	r25, r24
     e1a:	80 2d       	mov	r24, r0
     e1c:	82 2b       	or	r24, r18
     e1e:	8c 93       	st	X, r24
		 * ADIE    = 1 Enable ADC Interrupt
		 * ADATE   = 0 Disable Auto Trigger
		 * ADPS2:0 = 011 to choose ADC_Clock=F_CPU/8=1Mhz/8=125Khz --> ADC must operate in range 50-200Khz
		 */
	/*ADC ENABLE*/
	SET_BIT(ADCSRA  , ADEN);
     e20:	a6 e2       	ldi	r26, 0x26	; 38
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e6 e2       	ldi	r30, 0x26	; 38
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	80 68       	ori	r24, 0x80	; 128
     e2c:	8c 93       	st	X, r24
	/*configure to operate using the prescaler*/
	ADCSRA = (ADCSRA & 0xF8)|(Config_Ptr->prescaler & 0x07);
     e2e:	a6 e2       	ldi	r26, 0x26	; 38
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e6 e2       	ldi	r30, 0x26	; 38
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	98 2f       	mov	r25, r24
     e3a:	98 7f       	andi	r25, 0xF8	; 248
     e3c:	e9 81       	ldd	r30, Y+1	; 0x01
     e3e:	fa 81       	ldd	r31, Y+2	; 0x02
     e40:	81 81       	ldd	r24, Z+1	; 0x01
     e42:	87 70       	andi	r24, 0x07	; 7
     e44:	89 2b       	or	r24, r25
     e46:	8c 93       	st	X, r24


}
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <ADC_readChannel>:
uint16 ADC_readChannel(uint8 ch_num)
{
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	0f 92       	push	r0
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	89 83       	std	Y+1, r24	; 0x01

	/* Input channel number must be from 0 --> 7 */
	/* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
	ADMUX = (ADMUX & 0xE0) | (ch_num & 0x07);
     e5e:	a7 e2       	ldi	r26, 0x27	; 39
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e7 e2       	ldi	r30, 0x27	; 39
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	98 2f       	mov	r25, r24
     e6a:	90 7e       	andi	r25, 0xE0	; 224
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
     e6e:	87 70       	andi	r24, 0x07	; 7
     e70:	89 2b       	or	r24, r25
     e72:	8c 93       	st	X, r24
	/* Start conversion write '1' to ADSC */
	SET_BIT(ADCSRA , ADSC);
     e74:	a6 e2       	ldi	r26, 0x26	; 38
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e6 e2       	ldi	r30, 0x26	; 38
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	80 64       	ori	r24, 0x40	; 64
     e80:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA , ADIF))
     e82:	e6 e2       	ldi	r30, 0x26	; 38
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	88 2f       	mov	r24, r24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	80 71       	andi	r24, 0x10	; 16
     e8e:	90 70       	andi	r25, 0x00	; 0
     e90:	00 97       	sbiw	r24, 0x00	; 0
     e92:	b9 f3       	breq	.-18     	; 0xe82 <ADC_readChannel+0x30>
	{
		/*waiting for the adc to convert and set the flag*/
	}
	SET_BIT(ADCSRA , ADIF);/*clearing interrupt flag for next read*/
     e94:	a6 e2       	ldi	r26, 0x26	; 38
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e6 e2       	ldi	r30, 0x26	; 38
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	80 61       	ori	r24, 0x10	; 16
     ea0:	8c 93       	st	X, r24
	return ADC;
     ea2:	e4 e2       	ldi	r30, 0x24	; 36
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	91 81       	ldd	r25, Z+1	; 0x01
}
     eaa:	0f 90       	pop	r0
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	08 95       	ret

00000eb2 <DcMotor_Init>:

#include "dcmotor.h"


void DcMotor_Init(void)
{
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
	/*Setting two pins for the motor*/
	GPIO_setupPinDirection(PORTB_ID, PIN0_ID, PIN_OUTPUT);
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	41 e0       	ldi	r20, 0x01	; 1
     ec0:	40 d0       	rcall	.+128    	; 0xf42 <GPIO_setupPinDirection>
     ec2:	81 e0       	ldi	r24, 0x01	; 1
	GPIO_setupPinDirection(PORTB_ID, PIN1_ID, PIN_OUTPUT);
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	41 e0       	ldi	r20, 0x01	; 1
     ec8:	3c d0       	rcall	.+120    	; 0xf42 <GPIO_setupPinDirection>
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	60 e0       	ldi	r22, 0x00	; 0
	/*stopping the motor by writing zero */
	GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_LOW);
     ece:	40 e0       	ldi	r20, 0x00	; 0
     ed0:	23 d1       	rcall	.+582    	; 0x1118 <GPIO_writePin>
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	40 e0       	ldi	r20, 0x00	; 0
	GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_LOW);
     ed8:	1f d1       	rcall	.+574    	; 0x1118 <GPIO_writePin>
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	08 95       	ret

00000ee0 <DcMotor_Rotate>:
  * duty cycle 100% --> Maximum Speed
  * duty cycle 50%  --> Half Maximum Speed
  * duty cycle 0%   --> Motor Stop
  */
void DcMotor_Rotate(DcMotor_State state , uint8 speed)
{
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	00 d0       	rcall	.+0      	; 0xee6 <DcMotor_Rotate+0x6>
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	89 83       	std	Y+1, r24	; 0x01
     eec:	6a 83       	std	Y+2, r22	; 0x02
	if(state == STOP)
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	88 23       	and	r24, r24
     ef2:	49 f4       	brne	.+18     	; 0xf06 <DcMotor_Rotate+0x26>
	{
		/*stopping the motor by writing zero */
		GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_LOW);
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	40 e0       	ldi	r20, 0x00	; 0
     efa:	0e d1       	rcall	.+540    	; 0x1118 <GPIO_writePin>
     efc:	81 e0       	ldi	r24, 0x01	; 1
		GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_LOW);
     efe:	61 e0       	ldi	r22, 0x01	; 1
     f00:	40 e0       	ldi	r20, 0x00	; 0
     f02:	0a d1       	rcall	.+532    	; 0x1118 <GPIO_writePin>
     f04:	17 c0       	rjmp	.+46     	; 0xf34 <DcMotor_Rotate+0x54>
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	82 30       	cpi	r24, 0x02	; 2

	}
	else if( state == A_CW)
     f0a:	49 f4       	brne	.+18     	; 0xf1e <DcMotor_Rotate+0x3e>
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	60 e0       	ldi	r22, 0x00	; 0
	{
		// Rotate the motor --> anti-clock wise
		GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_LOW);
     f10:	40 e0       	ldi	r20, 0x00	; 0
     f12:	02 d1       	rcall	.+516    	; 0x1118 <GPIO_writePin>
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	61 e0       	ldi	r22, 0x01	; 1
     f18:	41 e0       	ldi	r20, 0x01	; 1
		GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_HIGH);
     f1a:	fe d0       	rcall	.+508    	; 0x1118 <GPIO_writePin>
     f1c:	0b c0       	rjmp	.+22     	; 0xf34 <DcMotor_Rotate+0x54>
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	41 f4       	brne	.+16     	; 0xf34 <DcMotor_Rotate+0x54>
     f24:	81 e0       	ldi	r24, 0x01	; 1

	}
	else if(state == CW)
     f26:	60 e0       	ldi	r22, 0x00	; 0
     f28:	41 e0       	ldi	r20, 0x01	; 1
     f2a:	f6 d0       	rcall	.+492    	; 0x1118 <GPIO_writePin>
	{
		// Rotate the motor --> clock wise
		GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_HIGH);
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	61 e0       	ldi	r22, 0x01	; 1
     f30:	40 e0       	ldi	r20, 0x00	; 0
     f32:	f2 d0       	rcall	.+484    	; 0x1118 <GPIO_writePin>
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
		GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_LOW);
     f36:	f8 d7       	rcall	.+4080   	; 0x1f28 <PWM_Timer0_Start>
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	cf 91       	pop	r28
     f3e:	df 91       	pop	r29

	}
	/*setting the pwm to set the speed of the motor*/
	PWM_Timer0_Start(speed);
     f40:	08 95       	ret

00000f42 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     f42:	df 93       	push	r29
     f44:	cf 93       	push	r28
     f46:	00 d0       	rcall	.+0      	; 0xf48 <GPIO_setupPinDirection+0x6>
     f48:	00 d0       	rcall	.+0      	; 0xf4a <GPIO_setupPinDirection+0x8>
     f4a:	0f 92       	push	r0
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	89 83       	std	Y+1, r24	; 0x01
     f52:	6a 83       	std	Y+2, r22	; 0x02
     f54:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	88 30       	cpi	r24, 0x08	; 8
     f5a:	08 f0       	brcs	.+2      	; 0xf5e <GPIO_setupPinDirection+0x1c>
     f5c:	d5 c0       	rjmp	.+426    	; 0x1108 <GPIO_setupPinDirection+0x1c6>
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	84 30       	cpi	r24, 0x04	; 4
     f62:	08 f0       	brcs	.+2      	; 0xf66 <GPIO_setupPinDirection+0x24>
     f64:	d1 c0       	rjmp	.+418    	; 0x1108 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	3d 83       	std	Y+5, r19	; 0x05
     f6e:	2c 83       	std	Y+4, r18	; 0x04
     f70:	8c 81       	ldd	r24, Y+4	; 0x04
     f72:	9d 81       	ldd	r25, Y+5	; 0x05
     f74:	81 30       	cpi	r24, 0x01	; 1
     f76:	91 05       	cpc	r25, r1
     f78:	09 f4       	brne	.+2      	; 0xf7c <GPIO_setupPinDirection+0x3a>
     f7a:	43 c0       	rjmp	.+134    	; 0x1002 <GPIO_setupPinDirection+0xc0>
     f7c:	2c 81       	ldd	r18, Y+4	; 0x04
     f7e:	3d 81       	ldd	r19, Y+5	; 0x05
     f80:	22 30       	cpi	r18, 0x02	; 2
     f82:	31 05       	cpc	r19, r1
     f84:	2c f4       	brge	.+10     	; 0xf90 <GPIO_setupPinDirection+0x4e>
     f86:	8c 81       	ldd	r24, Y+4	; 0x04
     f88:	9d 81       	ldd	r25, Y+5	; 0x05
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	71 f0       	breq	.+28     	; 0xfaa <GPIO_setupPinDirection+0x68>
     f8e:	bc c0       	rjmp	.+376    	; 0x1108 <GPIO_setupPinDirection+0x1c6>
     f90:	2c 81       	ldd	r18, Y+4	; 0x04
     f92:	3d 81       	ldd	r19, Y+5	; 0x05
     f94:	22 30       	cpi	r18, 0x02	; 2
     f96:	31 05       	cpc	r19, r1
     f98:	09 f4       	brne	.+2      	; 0xf9c <GPIO_setupPinDirection+0x5a>
     f9a:	5f c0       	rjmp	.+190    	; 0x105a <GPIO_setupPinDirection+0x118>
     f9c:	8c 81       	ldd	r24, Y+4	; 0x04
     f9e:	9d 81       	ldd	r25, Y+5	; 0x05
     fa0:	83 30       	cpi	r24, 0x03	; 3
     fa2:	91 05       	cpc	r25, r1
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <GPIO_setupPinDirection+0x66>
     fa6:	85 c0       	rjmp	.+266    	; 0x10b2 <GPIO_setupPinDirection+0x170>
     fa8:	af c0       	rjmp	.+350    	; 0x1108 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	81 30       	cpi	r24, 0x01	; 1
     fae:	a1 f4       	brne	.+40     	; 0xfd8 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     fb0:	aa e3       	ldi	r26, 0x3A	; 58
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	ea e3       	ldi	r30, 0x3A	; 58
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 2e       	mov	r0, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <GPIO_setupPinDirection+0x8c>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <GPIO_setupPinDirection+0x88>
     fd2:	84 2b       	or	r24, r20
     fd4:	8c 93       	st	X, r24
     fd6:	98 c0       	rjmp	.+304    	; 0x1108 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     fd8:	aa e3       	ldi	r26, 0x3A	; 58
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	ea e3       	ldi	r30, 0x3A	; 58
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <GPIO_setupPinDirection+0xb4>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <GPIO_setupPinDirection+0xb0>
     ffa:	80 95       	com	r24
     ffc:	84 23       	and	r24, r20
     ffe:	8c 93       	st	X, r24
    1000:	83 c0       	rjmp	.+262    	; 0x1108 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	81 30       	cpi	r24, 0x01	; 1
    1006:	a1 f4       	brne	.+40     	; 0x1030 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1008:	a7 e3       	ldi	r26, 0x37	; 55
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e7 e3       	ldi	r30, 0x37	; 55
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <GPIO_setupPinDirection+0xe4>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <GPIO_setupPinDirection+0xe0>
    102a:	84 2b       	or	r24, r20
    102c:	8c 93       	st	X, r24
    102e:	6c c0       	rjmp	.+216    	; 0x1108 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1030:	a7 e3       	ldi	r26, 0x37	; 55
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e7 e3       	ldi	r30, 0x37	; 55
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 2e       	mov	r0, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <GPIO_setupPinDirection+0x10c>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <GPIO_setupPinDirection+0x108>
    1052:	80 95       	com	r24
    1054:	84 23       	and	r24, r20
    1056:	8c 93       	st	X, r24
    1058:	57 c0       	rjmp	.+174    	; 0x1108 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	81 30       	cpi	r24, 0x01	; 1
    105e:	a1 f4       	brne	.+40     	; 0x1088 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1060:	a4 e3       	ldi	r26, 0x34	; 52
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e4 e3       	ldi	r30, 0x34	; 52
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 2e       	mov	r0, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <GPIO_setupPinDirection+0x13c>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <GPIO_setupPinDirection+0x138>
    1082:	84 2b       	or	r24, r20
    1084:	8c 93       	st	X, r24
    1086:	40 c0       	rjmp	.+128    	; 0x1108 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1088:	a4 e3       	ldi	r26, 0x34	; 52
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e4 e3       	ldi	r30, 0x34	; 52
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	48 2f       	mov	r20, r24
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	02 2e       	mov	r0, r18
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <GPIO_setupPinDirection+0x164>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	0a 94       	dec	r0
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <GPIO_setupPinDirection+0x160>
    10aa:	80 95       	com	r24
    10ac:	84 23       	and	r24, r20
    10ae:	8c 93       	st	X, r24
    10b0:	2b c0       	rjmp	.+86     	; 0x1108 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	81 30       	cpi	r24, 0x01	; 1
    10b6:	a1 f4       	brne	.+40     	; 0x10e0 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    10b8:	a1 e3       	ldi	r26, 0x31	; 49
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e1 e3       	ldi	r30, 0x31	; 49
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	48 2f       	mov	r20, r24
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	02 2e       	mov	r0, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <GPIO_setupPinDirection+0x194>
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	0a 94       	dec	r0
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <GPIO_setupPinDirection+0x190>
    10da:	84 2b       	or	r24, r20
    10dc:	8c 93       	st	X, r24
    10de:	14 c0       	rjmp	.+40     	; 0x1108 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    10e0:	a1 e3       	ldi	r26, 0x31	; 49
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e1 e3       	ldi	r30, 0x31	; 49
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	48 2f       	mov	r20, r24
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	02 2e       	mov	r0, r18
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <GPIO_setupPinDirection+0x1bc>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	0a 94       	dec	r0
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <GPIO_setupPinDirection+0x1b8>
    1102:	80 95       	com	r24
    1104:	84 23       	and	r24, r20
    1106:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	00 d0       	rcall	.+0      	; 0x111e <GPIO_writePin+0x6>
    111e:	00 d0       	rcall	.+0      	; 0x1120 <GPIO_writePin+0x8>
    1120:	0f 92       	push	r0
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	6a 83       	std	Y+2, r22	; 0x02
    112a:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	88 30       	cpi	r24, 0x08	; 8
    1130:	08 f0       	brcs	.+2      	; 0x1134 <GPIO_writePin+0x1c>
    1132:	e4 c0       	rjmp	.+456    	; 0x12fc <GPIO_writePin+0x1e4>
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	84 30       	cpi	r24, 0x04	; 4
    1138:	08 f0       	brcs	.+2      	; 0x113c <GPIO_writePin+0x24>
    113a:	e0 c0       	rjmp	.+448    	; 0x12fc <GPIO_writePin+0x1e4>
	{
		/* do nothing*/
	}
	else
	{
		switch(port_num)
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	3d 83       	std	Y+5, r19	; 0x05
    1144:	2c 83       	std	Y+4, r18	; 0x04
    1146:	8c 81       	ldd	r24, Y+4	; 0x04
    1148:	9d 81       	ldd	r25, Y+5	; 0x05
    114a:	81 30       	cpi	r24, 0x01	; 1
    114c:	91 05       	cpc	r25, r1
    114e:	09 f4       	brne	.+2      	; 0x1152 <GPIO_writePin+0x3a>
    1150:	47 c0       	rjmp	.+142    	; 0x11e0 <GPIO_writePin+0xc8>
    1152:	2c 81       	ldd	r18, Y+4	; 0x04
    1154:	3d 81       	ldd	r19, Y+5	; 0x05
    1156:	22 30       	cpi	r18, 0x02	; 2
    1158:	31 05       	cpc	r19, r1
    115a:	2c f4       	brge	.+10     	; 0x1166 <GPIO_writePin+0x4e>
    115c:	8c 81       	ldd	r24, Y+4	; 0x04
    115e:	9d 81       	ldd	r25, Y+5	; 0x05
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	71 f0       	breq	.+28     	; 0x1180 <GPIO_writePin+0x68>
    1164:	cb c0       	rjmp	.+406    	; 0x12fc <GPIO_writePin+0x1e4>
    1166:	2c 81       	ldd	r18, Y+4	; 0x04
    1168:	3d 81       	ldd	r19, Y+5	; 0x05
    116a:	22 30       	cpi	r18, 0x02	; 2
    116c:	31 05       	cpc	r19, r1
    116e:	09 f4       	brne	.+2      	; 0x1172 <GPIO_writePin+0x5a>
    1170:	67 c0       	rjmp	.+206    	; 0x1240 <GPIO_writePin+0x128>
    1172:	8c 81       	ldd	r24, Y+4	; 0x04
    1174:	9d 81       	ldd	r25, Y+5	; 0x05
    1176:	83 30       	cpi	r24, 0x03	; 3
    1178:	91 05       	cpc	r25, r1
    117a:	09 f4       	brne	.+2      	; 0x117e <GPIO_writePin+0x66>
    117c:	91 c0       	rjmp	.+290    	; 0x12a0 <GPIO_writePin+0x188>
    117e:	be c0       	rjmp	.+380    	; 0x12fc <GPIO_writePin+0x1e4>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	81 30       	cpi	r24, 0x01	; 1
    1184:	a1 f4       	brne	.+40     	; 0x11ae <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1186:	ab e3       	ldi	r26, 0x3B	; 59
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	eb e3       	ldi	r30, 0x3B	; 59
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 2e       	mov	r0, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <GPIO_writePin+0x8c>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <GPIO_writePin+0x88>
    11a8:	84 2b       	or	r24, r20
    11aa:	8c 93       	st	X, r24
    11ac:	a7 c0       	rjmp	.+334    	; 0x12fc <GPIO_writePin+0x1e4>
			}
			else if(value == LOGIC_LOW)
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	88 23       	and	r24, r24
    11b2:	09 f0       	breq	.+2      	; 0x11b6 <GPIO_writePin+0x9e>
    11b4:	a3 c0       	rjmp	.+326    	; 0x12fc <GPIO_writePin+0x1e4>
			{
				CLEAR_BIT(PORTA,pin_num);
    11b6:	ab e3       	ldi	r26, 0x3B	; 59
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	eb e3       	ldi	r30, 0x3B	; 59
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	48 2f       	mov	r20, r24
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	02 2e       	mov	r0, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <GPIO_writePin+0xbc>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	0a 94       	dec	r0
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <GPIO_writePin+0xb8>
    11d8:	80 95       	com	r24
    11da:	84 23       	and	r24, r20
    11dc:	8c 93       	st	X, r24
    11de:	8e c0       	rjmp	.+284    	; 0x12fc <GPIO_writePin+0x1e4>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	81 30       	cpi	r24, 0x01	; 1
    11e4:	a1 f4       	brne	.+40     	; 0x120e <GPIO_writePin+0xf6>
			{
				SET_BIT(PORTB,pin_num);
    11e6:	a8 e3       	ldi	r26, 0x38	; 56
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e8 e3       	ldi	r30, 0x38	; 56
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	48 2f       	mov	r20, r24
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 2e       	mov	r0, r18
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <GPIO_writePin+0xec>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	0a 94       	dec	r0
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <GPIO_writePin+0xe8>
    1208:	84 2b       	or	r24, r20
    120a:	8c 93       	st	X, r24
    120c:	77 c0       	rjmp	.+238    	; 0x12fc <GPIO_writePin+0x1e4>
			}
			else if(value == LOGIC_LOW)
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	88 23       	and	r24, r24
    1212:	09 f0       	breq	.+2      	; 0x1216 <GPIO_writePin+0xfe>
    1214:	73 c0       	rjmp	.+230    	; 0x12fc <GPIO_writePin+0x1e4>
			{
				CLEAR_BIT(PORTB,pin_num);
    1216:	a8 e3       	ldi	r26, 0x38	; 56
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e8 e3       	ldi	r30, 0x38	; 56
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	48 2f       	mov	r20, r24
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 2e       	mov	r0, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <GPIO_writePin+0x11c>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	0a 94       	dec	r0
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <GPIO_writePin+0x118>
    1238:	80 95       	com	r24
    123a:	84 23       	and	r24, r20
    123c:	8c 93       	st	X, r24
    123e:	5e c0       	rjmp	.+188    	; 0x12fc <GPIO_writePin+0x1e4>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	a1 f4       	brne	.+40     	; 0x126e <GPIO_writePin+0x156>
			{
				SET_BIT(PORTC,pin_num);
    1246:	a5 e3       	ldi	r26, 0x35	; 53
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	e5 e3       	ldi	r30, 0x35	; 53
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	48 2f       	mov	r20, r24
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	02 2e       	mov	r0, r18
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <GPIO_writePin+0x14c>
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	0a 94       	dec	r0
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <GPIO_writePin+0x148>
    1268:	84 2b       	or	r24, r20
    126a:	8c 93       	st	X, r24
    126c:	47 c0       	rjmp	.+142    	; 0x12fc <GPIO_writePin+0x1e4>
			}
			else if(value == LOGIC_LOW)
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	88 23       	and	r24, r24
    1272:	09 f0       	breq	.+2      	; 0x1276 <GPIO_writePin+0x15e>
    1274:	43 c0       	rjmp	.+134    	; 0x12fc <GPIO_writePin+0x1e4>
			{
				CLEAR_BIT(PORTC,pin_num);
    1276:	a5 e3       	ldi	r26, 0x35	; 53
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e5 e3       	ldi	r30, 0x35	; 53
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	48 2f       	mov	r20, r24
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	02 2e       	mov	r0, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <GPIO_writePin+0x17c>
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	0a 94       	dec	r0
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <GPIO_writePin+0x178>
    1298:	80 95       	com	r24
    129a:	84 23       	and	r24, r20
    129c:	8c 93       	st	X, r24
    129e:	2e c0       	rjmp	.+92     	; 0x12fc <GPIO_writePin+0x1e4>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	81 30       	cpi	r24, 0x01	; 1
    12a4:	a1 f4       	brne	.+40     	; 0x12ce <GPIO_writePin+0x1b6>
			{
				SET_BIT(PORTD,pin_num);
    12a6:	a2 e3       	ldi	r26, 0x32	; 50
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e2 e3       	ldi	r30, 0x32	; 50
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	48 2f       	mov	r20, r24
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 2e       	mov	r0, r18
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <GPIO_writePin+0x1ac>
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	0a 94       	dec	r0
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <GPIO_writePin+0x1a8>
    12c8:	84 2b       	or	r24, r20
    12ca:	8c 93       	st	X, r24
    12cc:	17 c0       	rjmp	.+46     	; 0x12fc <GPIO_writePin+0x1e4>
			}
			else if(value == LOGIC_LOW)
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	88 23       	and	r24, r24
    12d2:	a1 f4       	brne	.+40     	; 0x12fc <GPIO_writePin+0x1e4>
			{
				CLEAR_BIT(PORTD,pin_num);
    12d4:	a2 e3       	ldi	r26, 0x32	; 50
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e2 e3       	ldi	r30, 0x32	; 50
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	48 2f       	mov	r20, r24
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	02 2e       	mov	r0, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <GPIO_writePin+0x1da>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	0a 94       	dec	r0
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <GPIO_writePin+0x1d6>
    12f6:	80 95       	com	r24
    12f8:	84 23       	and	r24, r20
    12fa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	00 d0       	rcall	.+0      	; 0x1312 <GPIO_setupPortDirection+0x6>
    1312:	00 d0       	rcall	.+0      	; 0x1314 <GPIO_setupPortDirection+0x8>
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	89 83       	std	Y+1, r24	; 0x01
    131a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	84 30       	cpi	r24, 0x04	; 4
    1320:	90 f5       	brcc	.+100    	; 0x1386 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	3c 83       	std	Y+4, r19	; 0x04
    132a:	2b 83       	std	Y+3, r18	; 0x03
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	9c 81       	ldd	r25, Y+4	; 0x04
    1330:	81 30       	cpi	r24, 0x01	; 1
    1332:	91 05       	cpc	r25, r1
    1334:	d1 f0       	breq	.+52     	; 0x136a <GPIO_setupPortDirection+0x5e>
    1336:	2b 81       	ldd	r18, Y+3	; 0x03
    1338:	3c 81       	ldd	r19, Y+4	; 0x04
    133a:	22 30       	cpi	r18, 0x02	; 2
    133c:	31 05       	cpc	r19, r1
    133e:	2c f4       	brge	.+10     	; 0x134a <GPIO_setupPortDirection+0x3e>
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	9c 81       	ldd	r25, Y+4	; 0x04
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	61 f0       	breq	.+24     	; 0x1360 <GPIO_setupPortDirection+0x54>
    1348:	1e c0       	rjmp	.+60     	; 0x1386 <GPIO_setupPortDirection+0x7a>
    134a:	2b 81       	ldd	r18, Y+3	; 0x03
    134c:	3c 81       	ldd	r19, Y+4	; 0x04
    134e:	22 30       	cpi	r18, 0x02	; 2
    1350:	31 05       	cpc	r19, r1
    1352:	81 f0       	breq	.+32     	; 0x1374 <GPIO_setupPortDirection+0x68>
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	9c 81       	ldd	r25, Y+4	; 0x04
    1358:	83 30       	cpi	r24, 0x03	; 3
    135a:	91 05       	cpc	r25, r1
    135c:	81 f0       	breq	.+32     	; 0x137e <GPIO_setupPortDirection+0x72>
    135e:	13 c0       	rjmp	.+38     	; 0x1386 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1360:	ea e3       	ldi	r30, 0x3A	; 58
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	80 83       	st	Z, r24
    1368:	0e c0       	rjmp	.+28     	; 0x1386 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    136a:	e7 e3       	ldi	r30, 0x37	; 55
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	80 83       	st	Z, r24
    1372:	09 c0       	rjmp	.+18     	; 0x1386 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1374:	e4 e3       	ldi	r30, 0x34	; 52
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	80 83       	st	Z, r24
    137c:	04 c0       	rjmp	.+8      	; 0x1386 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    137e:	e1 e3       	ldi	r30, 0x31	; 49
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	80 83       	st	Z, r24
			break;
		}
	}
}
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	00 d0       	rcall	.+0      	; 0x139a <GPIO_writePort+0x6>
    139a:	00 d0       	rcall	.+0      	; 0x139c <GPIO_writePort+0x8>
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	6a 83       	std	Y+2, r22	; 0x02
	if( (port_num >= NUM_OF_PORTS))
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	84 30       	cpi	r24, 0x04	; 4
    13a8:	90 f5       	brcc	.+100    	; 0x140e <GPIO_writePort+0x7a>
	{
		/*Do Nothing*/
	}
	else
	{
		switch(port_num)
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	3c 83       	std	Y+4, r19	; 0x04
    13b2:	2b 83       	std	Y+3, r18	; 0x03
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	9c 81       	ldd	r25, Y+4	; 0x04
    13b8:	81 30       	cpi	r24, 0x01	; 1
    13ba:	91 05       	cpc	r25, r1
    13bc:	d1 f0       	breq	.+52     	; 0x13f2 <GPIO_writePort+0x5e>
    13be:	2b 81       	ldd	r18, Y+3	; 0x03
    13c0:	3c 81       	ldd	r19, Y+4	; 0x04
    13c2:	22 30       	cpi	r18, 0x02	; 2
    13c4:	31 05       	cpc	r19, r1
    13c6:	2c f4       	brge	.+10     	; 0x13d2 <GPIO_writePort+0x3e>
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	9c 81       	ldd	r25, Y+4	; 0x04
    13cc:	00 97       	sbiw	r24, 0x00	; 0
    13ce:	61 f0       	breq	.+24     	; 0x13e8 <GPIO_writePort+0x54>
    13d0:	1e c0       	rjmp	.+60     	; 0x140e <GPIO_writePort+0x7a>
    13d2:	2b 81       	ldd	r18, Y+3	; 0x03
    13d4:	3c 81       	ldd	r19, Y+4	; 0x04
    13d6:	22 30       	cpi	r18, 0x02	; 2
    13d8:	31 05       	cpc	r19, r1
    13da:	81 f0       	breq	.+32     	; 0x13fc <GPIO_writePort+0x68>
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	9c 81       	ldd	r25, Y+4	; 0x04
    13e0:	83 30       	cpi	r24, 0x03	; 3
    13e2:	91 05       	cpc	r25, r1
    13e4:	81 f0       	breq	.+32     	; 0x1406 <GPIO_writePort+0x72>
    13e6:	13 c0       	rjmp	.+38     	; 0x140e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    13e8:	eb e3       	ldi	r30, 0x3B	; 59
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	80 83       	st	Z, r24
    13f0:	0e c0       	rjmp	.+28     	; 0x140e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    13f2:	e8 e3       	ldi	r30, 0x38	; 56
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	80 83       	st	Z, r24
    13fa:	09 c0       	rjmp	.+18     	; 0x140e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    13fc:	e5 e3       	ldi	r30, 0x35	; 53
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	80 83       	st	Z, r24
    1404:	04 c0       	rjmp	.+8      	; 0x140e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD =value;
    1406:	e2 e3       	ldi	r30, 0x32	; 50
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	80 83       	st	Z, r24
			break;
		}
	}

}
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	08 95       	ret

0000141c <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1424:	83 e0       	ldi	r24, 0x03	; 3
    1426:	60 e0       	ldi	r22, 0x00	; 0
    1428:	41 e0       	ldi	r20, 0x01	; 1
    142a:	8b dd       	rcall	.-1258   	; 0xf42 <GPIO_setupPinDirection>
    142c:	83 e0       	ldi	r24, 0x03	; 3
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    142e:	61 e0       	ldi	r22, 0x01	; 1
    1430:	41 e0       	ldi	r20, 0x01	; 1
    1432:	87 dd       	rcall	.-1266   	; 0xf42 <GPIO_setupPinDirection>
    1434:	83 e0       	ldi	r24, 0x03	; 3
    1436:	62 e0       	ldi	r22, 0x02	; 2
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1438:	41 e0       	ldi	r20, 0x01	; 1
    143a:	83 dd       	rcall	.-1274   	; 0xf42 <GPIO_setupPinDirection>
    143c:	82 e0       	ldi	r24, 0x02	; 2
    143e:	6f ef       	ldi	r22, 0xFF	; 255
    1440:	65 df       	rcall	.-310    	; 0x130c <GPIO_setupPortDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1442:	88 e3       	ldi	r24, 0x38	; 56
    1444:	07 d0       	rcall	.+14     	; 0x1454 <LCD_sendCommand>
    1446:	8c e0       	ldi	r24, 0x0C	; 12
    1448:	05 d0       	rcall	.+10     	; 0x1454 <LCD_sendCommand>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	03 d0       	rcall	.+6      	; 0x1454 <LCD_sendCommand>
    144e:	cf 91       	pop	r28
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	e9 97       	sbiw	r28, 0x39	; 57
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	f8 94       	cli
    1462:	de bf       	out	0x3e, r29	; 62
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	cd bf       	out	0x3d, r28	; 61
    1468:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    146a:	83 e0       	ldi	r24, 0x03	; 3
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	40 e0       	ldi	r20, 0x00	; 0
    1470:	53 de       	rcall	.-858    	; 0x1118 <GPIO_writePin>
    1472:	83 e0       	ldi	r24, 0x03	; 3
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1474:	61 e0       	ldi	r22, 0x01	; 1
    1476:	40 e0       	ldi	r20, 0x00	; 0
    1478:	4f de       	rcall	.-866    	; 0x1118 <GPIO_writePin>
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	a0 e8       	ldi	r26, 0x80	; 128
    1480:	bf e3       	ldi	r27, 0x3F	; 63
    1482:	8d ab       	std	Y+53, r24	; 0x35
    1484:	9e ab       	std	Y+54, r25	; 0x36
    1486:	af ab       	std	Y+55, r26	; 0x37
    1488:	b8 af       	std	Y+56, r27	; 0x38
    148a:	6d a9       	ldd	r22, Y+53	; 0x35
    148c:	7e a9       	ldd	r23, Y+54	; 0x36
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    148e:	8f a9       	ldd	r24, Y+55	; 0x37
    1490:	98 ad       	ldd	r25, Y+56	; 0x38
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	4a e7       	ldi	r20, 0x7A	; 122
    1498:	53 e4       	ldi	r21, 0x43	; 67
    149a:	0e 94 0a 02 	call	0x414	; 0x414 <__mulsf3>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	89 ab       	std	Y+49, r24	; 0x31
    14a4:	9a ab       	std	Y+50, r25	; 0x32
    14a6:	ab ab       	std	Y+51, r26	; 0x33
    14a8:	bc ab       	std	Y+52, r27	; 0x34
    14aa:	69 a9       	ldd	r22, Y+49	; 0x31
    14ac:	7a a9       	ldd	r23, Y+50	; 0x32
	if (__tmp < 1.0)
    14ae:	8b a9       	ldd	r24, Y+51	; 0x33
    14b0:	9c a9       	ldd	r25, Y+52	; 0x34
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	40 e8       	ldi	r20, 0x80	; 128
    14b8:	5f e3       	ldi	r21, 0x3F	; 63
    14ba:	a6 d9       	rcall	.-3252   	; 0x808 <__ltsf2>
    14bc:	88 23       	and	r24, r24
    14be:	2c f4       	brge	.+10     	; 0x14ca <LCD_sendCommand+0x76>
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	98 ab       	std	Y+48, r25	; 0x30
		__ticks = 1;
    14c6:	8f a7       	std	Y+47, r24	; 0x2f
    14c8:	3e c0       	rjmp	.+124    	; 0x1546 <LCD_sendCommand+0xf2>
    14ca:	69 a9       	ldd	r22, Y+49	; 0x31
    14cc:	7a a9       	ldd	r23, Y+50	; 0x32
    14ce:	8b a9       	ldd	r24, Y+51	; 0x33
	else if (__tmp > 65535)
    14d0:	9c a9       	ldd	r25, Y+52	; 0x34
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	3f ef       	ldi	r19, 0xFF	; 255
    14d6:	4f e7       	ldi	r20, 0x7F	; 127
    14d8:	57 e4       	ldi	r21, 0x47	; 71
    14da:	3c d9       	rcall	.-3464   	; 0x754 <__gtsf2>
    14dc:	18 16       	cp	r1, r24
    14de:	4c f5       	brge	.+82     	; 0x1532 <LCD_sendCommand+0xde>
    14e0:	6d a9       	ldd	r22, Y+53	; 0x35
    14e2:	7e a9       	ldd	r23, Y+54	; 0x36
    14e4:	8f a9       	ldd	r24, Y+55	; 0x37
    14e6:	98 ad       	ldd	r25, Y+56	; 0x38
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	40 e2       	ldi	r20, 0x20	; 32
    14ee:	51 e4       	ldi	r21, 0x41	; 65
    14f0:	0e 94 0a 02 	call	0x414	; 0x414 <__mulsf3>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	bc 01       	movw	r22, r24
    14fa:	cd 01       	movw	r24, r26
    14fc:	0e 94 40 00 	call	0x80	; 0x80 <__fixunssfsi>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	98 ab       	std	Y+48, r25	; 0x30
    1506:	8f a7       	std	Y+47, r24	; 0x2f
    1508:	0f c0       	rjmp	.+30     	; 0x1528 <LCD_sendCommand+0xd4>
    150a:	89 e1       	ldi	r24, 0x19	; 25
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	9e a7       	std	Y+46, r25	; 0x2e
    1510:	8d a7       	std	Y+45, r24	; 0x2d
    1512:	8d a5       	ldd	r24, Y+45	; 0x2d
    1514:	9e a5       	ldd	r25, Y+46	; 0x2e
    1516:	01 97       	sbiw	r24, 0x01	; 1
    1518:	f1 f7       	brne	.-4      	; 0x1516 <LCD_sendCommand+0xc2>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    151a:	9e a7       	std	Y+46, r25	; 0x2e
    151c:	8d a7       	std	Y+45, r24	; 0x2d
    151e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1520:	98 a9       	ldd	r25, Y+48	; 0x30
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	98 ab       	std	Y+48, r25	; 0x30
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1526:	8f a7       	std	Y+47, r24	; 0x2f
    1528:	8f a5       	ldd	r24, Y+47	; 0x2f
    152a:	98 a9       	ldd	r25, Y+48	; 0x30
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	69 f7       	brne	.-38     	; 0x150a <LCD_sendCommand+0xb6>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1530:	14 c0       	rjmp	.+40     	; 0x155a <LCD_sendCommand+0x106>
    1532:	69 a9       	ldd	r22, Y+49	; 0x31
    1534:	7a a9       	ldd	r23, Y+50	; 0x32
    1536:	8b a9       	ldd	r24, Y+51	; 0x33
    1538:	9c a9       	ldd	r25, Y+52	; 0x34
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    153a:	0e 94 40 00 	call	0x80	; 0x80 <__fixunssfsi>
    153e:	dc 01       	movw	r26, r24
    1540:	cb 01       	movw	r24, r22
    1542:	98 ab       	std	Y+48, r25	; 0x30
    1544:	8f a7       	std	Y+47, r24	; 0x2f
    1546:	8f a5       	ldd	r24, Y+47	; 0x2f
    1548:	98 a9       	ldd	r25, Y+48	; 0x30
    154a:	9c a7       	std	Y+44, r25	; 0x2c
    154c:	8b a7       	std	Y+43, r24	; 0x2b
    154e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1550:	9c a5       	ldd	r25, Y+44	; 0x2c
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <LCD_sendCommand+0xfe>
    1556:	9c a7       	std	Y+44, r25	; 0x2c
    1558:	8b a7       	std	Y+43, r24	; 0x2b
    155a:	83 e0       	ldi	r24, 0x03	; 3
    155c:	62 e0       	ldi	r22, 0x02	; 2
    155e:	41 e0       	ldi	r20, 0x01	; 1
    1560:	db dd       	rcall	.-1098   	; 0x1118 <GPIO_writePin>
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	a0 e8       	ldi	r26, 0x80	; 128
    1568:	bf e3       	ldi	r27, 0x3F	; 63
    156a:	8f a3       	std	Y+39, r24	; 0x27
    156c:	98 a7       	std	Y+40, r25	; 0x28
    156e:	a9 a7       	std	Y+41, r26	; 0x29
    1570:	ba a7       	std	Y+42, r27	; 0x2a
    1572:	6f a1       	ldd	r22, Y+39	; 0x27
    1574:	78 a5       	ldd	r23, Y+40	; 0x28
    1576:	89 a5       	ldd	r24, Y+41	; 0x29
    1578:	9a a5       	ldd	r25, Y+42	; 0x2a
    157a:	20 e0       	ldi	r18, 0x00	; 0
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	4a e7       	ldi	r20, 0x7A	; 122
    1580:	53 e4       	ldi	r21, 0x43	; 67
    1582:	0e 94 0a 02 	call	0x414	; 0x414 <__mulsf3>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	8b a3       	std	Y+35, r24	; 0x23
    158c:	9c a3       	std	Y+36, r25	; 0x24
    158e:	ad a3       	std	Y+37, r26	; 0x25
    1590:	be a3       	std	Y+38, r27	; 0x26
    1592:	6b a1       	ldd	r22, Y+35	; 0x23
    1594:	7c a1       	ldd	r23, Y+36	; 0x24
    1596:	8d a1       	ldd	r24, Y+37	; 0x25
    1598:	9e a1       	ldd	r25, Y+38	; 0x26
    159a:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	40 e8       	ldi	r20, 0x80	; 128
    15a0:	5f e3       	ldi	r21, 0x3F	; 63
    15a2:	32 d9       	rcall	.-3484   	; 0x808 <__ltsf2>
    15a4:	88 23       	and	r24, r24
    15a6:	2c f4       	brge	.+10     	; 0x15b2 <LCD_sendCommand+0x15e>
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	9a a3       	std	Y+34, r25	; 0x22
    15ae:	89 a3       	std	Y+33, r24	; 0x21
    15b0:	3e c0       	rjmp	.+124    	; 0x162e <LCD_sendCommand+0x1da>
    15b2:	6b a1       	ldd	r22, Y+35	; 0x23
		__ticks = 1;
    15b4:	7c a1       	ldd	r23, Y+36	; 0x24
    15b6:	8d a1       	ldd	r24, Y+37	; 0x25
    15b8:	9e a1       	ldd	r25, Y+38	; 0x26
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	3f ef       	ldi	r19, 0xFF	; 255
	else if (__tmp > 65535)
    15be:	4f e7       	ldi	r20, 0x7F	; 127
    15c0:	57 e4       	ldi	r21, 0x47	; 71
    15c2:	c8 d8       	rcall	.-3696   	; 0x754 <__gtsf2>
    15c4:	18 16       	cp	r1, r24
    15c6:	4c f5       	brge	.+82     	; 0x161a <LCD_sendCommand+0x1c6>
    15c8:	6f a1       	ldd	r22, Y+39	; 0x27
    15ca:	78 a5       	ldd	r23, Y+40	; 0x28
    15cc:	89 a5       	ldd	r24, Y+41	; 0x29
    15ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	40 e2       	ldi	r20, 0x20	; 32
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d6:	51 e4       	ldi	r21, 0x41	; 65
    15d8:	0e 94 0a 02 	call	0x414	; 0x414 <__mulsf3>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	bc 01       	movw	r22, r24
    15e2:	cd 01       	movw	r24, r26
    15e4:	0e 94 40 00 	call	0x80	; 0x80 <__fixunssfsi>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	9a a3       	std	Y+34, r25	; 0x22
    15ee:	89 a3       	std	Y+33, r24	; 0x21
    15f0:	0f c0       	rjmp	.+30     	; 0x1610 <LCD_sendCommand+0x1bc>
    15f2:	89 e1       	ldi	r24, 0x19	; 25
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	98 a3       	std	Y+32, r25	; 0x20
    15f8:	8f 8f       	std	Y+31, r24	; 0x1f
    15fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15fc:	98 a1       	ldd	r25, Y+32	; 0x20
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	f1 f7       	brne	.-4      	; 0x15fe <LCD_sendCommand+0x1aa>
    1602:	98 a3       	std	Y+32, r25	; 0x20
    1604:	8f 8f       	std	Y+31, r24	; 0x1f
    1606:	89 a1       	ldd	r24, Y+33	; 0x21
    1608:	9a a1       	ldd	r25, Y+34	; 0x22
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	9a a3       	std	Y+34, r25	; 0x22
    160e:	89 a3       	std	Y+33, r24	; 0x21
    1610:	89 a1       	ldd	r24, Y+33	; 0x21
    1612:	9a a1       	ldd	r25, Y+34	; 0x22
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1614:	00 97       	sbiw	r24, 0x00	; 0
    1616:	69 f7       	brne	.-38     	; 0x15f2 <LCD_sendCommand+0x19e>
    1618:	14 c0       	rjmp	.+40     	; 0x1642 <LCD_sendCommand+0x1ee>
    161a:	6b a1       	ldd	r22, Y+35	; 0x23
    161c:	7c a1       	ldd	r23, Y+36	; 0x24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161e:	8d a1       	ldd	r24, Y+37	; 0x25
    1620:	9e a1       	ldd	r25, Y+38	; 0x26
    1622:	0e 94 40 00 	call	0x80	; 0x80 <__fixunssfsi>
    1626:	dc 01       	movw	r26, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1628:	cb 01       	movw	r24, r22
    162a:	9a a3       	std	Y+34, r25	; 0x22
    162c:	89 a3       	std	Y+33, r24	; 0x21
    162e:	89 a1       	ldd	r24, Y+33	; 0x21
    1630:	9a a1       	ldd	r25, Y+34	; 0x22
    1632:	9e 8f       	std	Y+30, r25	; 0x1e
    1634:	8d 8f       	std	Y+29, r24	; 0x1d
    1636:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1638:	9e 8d       	ldd	r25, Y+30	; 0x1e
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	f1 f7       	brne	.-4      	; 0x163a <LCD_sendCommand+0x1e6>
    163e:	9e 8f       	std	Y+30, r25	; 0x1e
    1640:	8d 8f       	std	Y+29, r24	; 0x1d
    1642:	82 e0       	ldi	r24, 0x02	; 2
    1644:	69 ad       	ldd	r22, Y+57	; 0x39
    1646:	a6 de       	rcall	.-692    	; 0x1394 <GPIO_writePort>
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	a0 e8       	ldi	r26, 0x80	; 128
    164e:	bf e3       	ldi	r27, 0x3F	; 63
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1650:	89 8f       	std	Y+25, r24	; 0x19
    1652:	9a 8f       	std	Y+26, r25	; 0x1a
    1654:	ab 8f       	std	Y+27, r26	; 0x1b
    1656:	bc 8f       	std	Y+28, r27	; 0x1c
    1658:	69 8d       	ldd	r22, Y+25	; 0x19
    165a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    165c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    165e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	4a e7       	ldi	r20, 0x7A	; 122
    1666:	53 e4       	ldi	r21, 0x43	; 67
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1668:	0e 94 0a 02 	call	0x414	; 0x414 <__mulsf3>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	8d 8b       	std	Y+21, r24	; 0x15
    1672:	9e 8b       	std	Y+22, r25	; 0x16
    1674:	af 8b       	std	Y+23, r26	; 0x17
    1676:	b8 8f       	std	Y+24, r27	; 0x18
    1678:	6d 89       	ldd	r22, Y+21	; 0x15
    167a:	7e 89       	ldd	r23, Y+22	; 0x16
    167c:	8f 89       	ldd	r24, Y+23	; 0x17
    167e:	98 8d       	ldd	r25, Y+24	; 0x18
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	40 e8       	ldi	r20, 0x80	; 128
    1686:	5f e3       	ldi	r21, 0x3F	; 63
	if (__tmp < 1.0)
    1688:	bf d8       	rcall	.-3714   	; 0x808 <__ltsf2>
    168a:	88 23       	and	r24, r24
    168c:	2c f4       	brge	.+10     	; 0x1698 <LCD_sendCommand+0x244>
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	9c 8b       	std	Y+20, r25	; 0x14
    1694:	8b 8b       	std	Y+19, r24	; 0x13
    1696:	3e c0       	rjmp	.+124    	; 0x1714 <LCD_sendCommand+0x2c0>
    1698:	6d 89       	ldd	r22, Y+21	; 0x15
    169a:	7e 89       	ldd	r23, Y+22	; 0x16
    169c:	8f 89       	ldd	r24, Y+23	; 0x17
    169e:	98 8d       	ldd	r25, Y+24	; 0x18
		__ticks = 1;
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	3f ef       	ldi	r19, 0xFF	; 255
    16a4:	4f e7       	ldi	r20, 0x7F	; 127
    16a6:	57 e4       	ldi	r21, 0x47	; 71
    16a8:	55 d8       	rcall	.-3926   	; 0x754 <__gtsf2>
	else if (__tmp > 65535)
    16aa:	18 16       	cp	r1, r24
    16ac:	4c f5       	brge	.+82     	; 0x1700 <LCD_sendCommand+0x2ac>
    16ae:	69 8d       	ldd	r22, Y+25	; 0x19
    16b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	40 e2       	ldi	r20, 0x20	; 32
    16bc:	51 e4       	ldi	r21, 0x41	; 65
    16be:	0e 94 0a 02 	call	0x414	; 0x414 <__mulsf3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	bc 01       	movw	r22, r24
    16c8:	cd 01       	movw	r24, r26
    16ca:	0e 94 40 00 	call	0x80	; 0x80 <__fixunssfsi>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	9c 8b       	std	Y+20, r25	; 0x14
    16d4:	8b 8b       	std	Y+19, r24	; 0x13
    16d6:	0f c0       	rjmp	.+30     	; 0x16f6 <LCD_sendCommand+0x2a2>
    16d8:	89 e1       	ldi	r24, 0x19	; 25
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	9a 8b       	std	Y+18, r25	; 0x12
    16de:	89 8b       	std	Y+17, r24	; 0x11
    16e0:	89 89       	ldd	r24, Y+17	; 0x11
    16e2:	9a 89       	ldd	r25, Y+18	; 0x12
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	f1 f7       	brne	.-4      	; 0x16e4 <LCD_sendCommand+0x290>
    16e8:	9a 8b       	std	Y+18, r25	; 0x12
    16ea:	89 8b       	std	Y+17, r24	; 0x11
    16ec:	8b 89       	ldd	r24, Y+19	; 0x13
    16ee:	9c 89       	ldd	r25, Y+20	; 0x14
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	9c 8b       	std	Y+20, r25	; 0x14
    16f4:	8b 8b       	std	Y+19, r24	; 0x13
    16f6:	8b 89       	ldd	r24, Y+19	; 0x13
    16f8:	9c 89       	ldd	r25, Y+20	; 0x14
    16fa:	00 97       	sbiw	r24, 0x00	; 0
    16fc:	69 f7       	brne	.-38     	; 0x16d8 <LCD_sendCommand+0x284>
    16fe:	14 c0       	rjmp	.+40     	; 0x1728 <LCD_sendCommand+0x2d4>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1700:	6d 89       	ldd	r22, Y+21	; 0x15
    1702:	7e 89       	ldd	r23, Y+22	; 0x16
    1704:	8f 89       	ldd	r24, Y+23	; 0x17
    1706:	98 8d       	ldd	r25, Y+24	; 0x18
    1708:	0e 94 40 00 	call	0x80	; 0x80 <__fixunssfsi>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	9c 8b       	std	Y+20, r25	; 0x14
    1712:	8b 8b       	std	Y+19, r24	; 0x13
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1714:	8b 89       	ldd	r24, Y+19	; 0x13
    1716:	9c 89       	ldd	r25, Y+20	; 0x14
    1718:	98 8b       	std	Y+16, r25	; 0x10
    171a:	8f 87       	std	Y+15, r24	; 0x0f
    171c:	8f 85       	ldd	r24, Y+15	; 0x0f
    171e:	98 89       	ldd	r25, Y+16	; 0x10
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	f1 f7       	brne	.-4      	; 0x1720 <LCD_sendCommand+0x2cc>
    1724:	98 8b       	std	Y+16, r25	; 0x10
    1726:	8f 87       	std	Y+15, r24	; 0x0f
    1728:	83 e0       	ldi	r24, 0x03	; 3
    172a:	62 e0       	ldi	r22, 0x02	; 2
    172c:	40 e0       	ldi	r20, 0x00	; 0
    172e:	f4 dc       	rcall	.-1560   	; 0x1118 <GPIO_writePin>
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	a0 e8       	ldi	r26, 0x80	; 128
    1736:	bf e3       	ldi	r27, 0x3F	; 63
    1738:	8b 87       	std	Y+11, r24	; 0x0b
    173a:	9c 87       	std	Y+12, r25	; 0x0c
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    173c:	ad 87       	std	Y+13, r26	; 0x0d
    173e:	be 87       	std	Y+14, r27	; 0x0e
    1740:	6b 85       	ldd	r22, Y+11	; 0x0b
    1742:	7c 85       	ldd	r23, Y+12	; 0x0c
    1744:	8d 85       	ldd	r24, Y+13	; 0x0d
    1746:	9e 85       	ldd	r25, Y+14	; 0x0e
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	4a e7       	ldi	r20, 0x7A	; 122
    174e:	53 e4       	ldi	r21, 0x43	; 67
    1750:	0e 94 0a 02 	call	0x414	; 0x414 <__mulsf3>
    1754:	dc 01       	movw	r26, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1756:	cb 01       	movw	r24, r22
    1758:	8f 83       	std	Y+7, r24	; 0x07
    175a:	98 87       	std	Y+8, r25	; 0x08
    175c:	a9 87       	std	Y+9, r26	; 0x09
    175e:	ba 87       	std	Y+10, r27	; 0x0a
    1760:	6f 81       	ldd	r22, Y+7	; 0x07
    1762:	78 85       	ldd	r23, Y+8	; 0x08
    1764:	89 85       	ldd	r24, Y+9	; 0x09
    1766:	9a 85       	ldd	r25, Y+10	; 0x0a
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	40 e8       	ldi	r20, 0x80	; 128
    176e:	5f e3       	ldi	r21, 0x3F	; 63
    1770:	4b d8       	rcall	.-3946   	; 0x808 <__ltsf2>
    1772:	88 23       	and	r24, r24
    1774:	2c f4       	brge	.+10     	; 0x1780 <LCD_sendCommand+0x32c>
	if (__tmp < 1.0)
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	9e 83       	std	Y+6, r25	; 0x06
    177c:	8d 83       	std	Y+5, r24	; 0x05
    177e:	3f c0       	rjmp	.+126    	; 0x17fe <LCD_sendCommand+0x3aa>
    1780:	6f 81       	ldd	r22, Y+7	; 0x07
    1782:	78 85       	ldd	r23, Y+8	; 0x08
    1784:	89 85       	ldd	r24, Y+9	; 0x09
    1786:	9a 85       	ldd	r25, Y+10	; 0x0a
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	3f ef       	ldi	r19, 0xFF	; 255
    178c:	4f e7       	ldi	r20, 0x7F	; 127
		__ticks = 1;
    178e:	57 e4       	ldi	r21, 0x47	; 71
    1790:	0e 94 aa 03 	call	0x754	; 0x754 <__gtsf2>
    1794:	18 16       	cp	r1, r24
    1796:	4c f5       	brge	.+82     	; 0x17ea <LCD_sendCommand+0x396>
	else if (__tmp > 65535)
    1798:	6b 85       	ldd	r22, Y+11	; 0x0b
    179a:	7c 85       	ldd	r23, Y+12	; 0x0c
    179c:	8d 85       	ldd	r24, Y+13	; 0x0d
    179e:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	40 e2       	ldi	r20, 0x20	; 32
    17a6:	51 e4       	ldi	r21, 0x41	; 65
    17a8:	0e 94 0a 02 	call	0x414	; 0x414 <__mulsf3>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b0:	bc 01       	movw	r22, r24
    17b2:	cd 01       	movw	r24, r26
    17b4:	0e 94 40 00 	call	0x80	; 0x80 <__fixunssfsi>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	9e 83       	std	Y+6, r25	; 0x06
    17be:	8d 83       	std	Y+5, r24	; 0x05
    17c0:	0f c0       	rjmp	.+30     	; 0x17e0 <LCD_sendCommand+0x38c>
    17c2:	89 e1       	ldi	r24, 0x19	; 25
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	9c 83       	std	Y+4, r25	; 0x04
    17c8:	8b 83       	std	Y+3, r24	; 0x03
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	9c 81       	ldd	r25, Y+4	; 0x04
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	f1 f7       	brne	.-4      	; 0x17ce <LCD_sendCommand+0x37a>
    17d2:	9c 83       	std	Y+4, r25	; 0x04
    17d4:	8b 83       	std	Y+3, r24	; 0x03
    17d6:	8d 81       	ldd	r24, Y+5	; 0x05
    17d8:	9e 81       	ldd	r25, Y+6	; 0x06
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	9e 83       	std	Y+6, r25	; 0x06
    17de:	8d 83       	std	Y+5, r24	; 0x05
    17e0:	8d 81       	ldd	r24, Y+5	; 0x05
    17e2:	9e 81       	ldd	r25, Y+6	; 0x06
    17e4:	00 97       	sbiw	r24, 0x00	; 0
    17e6:	69 f7       	brne	.-38     	; 0x17c2 <LCD_sendCommand+0x36e>
    17e8:	14 c0       	rjmp	.+40     	; 0x1812 <LCD_sendCommand+0x3be>
    17ea:	6f 81       	ldd	r22, Y+7	; 0x07
    17ec:	78 85       	ldd	r23, Y+8	; 0x08
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ee:	89 85       	ldd	r24, Y+9	; 0x09
    17f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f2:	0e 94 40 00 	call	0x80	; 0x80 <__fixunssfsi>
    17f6:	dc 01       	movw	r26, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f8:	cb 01       	movw	r24, r22
    17fa:	9e 83       	std	Y+6, r25	; 0x06
    17fc:	8d 83       	std	Y+5, r24	; 0x05
    17fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1800:	9e 81       	ldd	r25, Y+6	; 0x06
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1802:	9a 83       	std	Y+2, r25	; 0x02
    1804:	89 83       	std	Y+1, r24	; 0x01
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	9a 81       	ldd	r25, Y+2	; 0x02
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	f1 f7       	brne	.-4      	; 0x180a <LCD_sendCommand+0x3b6>
    180e:	9a 83       	std	Y+2, r25	; 0x02
    1810:	89 83       	std	Y+1, r24	; 0x01
    1812:	e9 96       	adiw	r28, 0x39	; 57
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	f8 94       	cli
    1818:	de bf       	out	0x3e, r29	; 62
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	cd bf       	out	0x3d, r28	; 61
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	e9 97       	sbiw	r28, 0x39	; 57
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    183a:	83 e0       	ldi	r24, 0x03	; 3
    183c:	60 e0       	ldi	r22, 0x00	; 0
    183e:	41 e0       	ldi	r20, 0x01	; 1
    1840:	6b dc       	rcall	.-1834   	; 0x1118 <GPIO_writePin>
    1842:	83 e0       	ldi	r24, 0x03	; 3
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1844:	61 e0       	ldi	r22, 0x01	; 1
    1846:	40 e0       	ldi	r20, 0x00	; 0
    1848:	67 dc       	rcall	.-1842   	; 0x1118 <GPIO_writePin>
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	a0 e8       	ldi	r26, 0x80	; 128
    1850:	bf e3       	ldi	r27, 0x3F	; 63
    1852:	8d ab       	std	Y+53, r24	; 0x35
    1854:	9e ab       	std	Y+54, r25	; 0x36
    1856:	af ab       	std	Y+55, r26	; 0x37
    1858:	b8 af       	std	Y+56, r27	; 0x38
    185a:	6d a9       	ldd	r22, Y+53	; 0x35
    185c:	7e a9       	ldd	r23, Y+54	; 0x36
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    185e:	8f a9       	ldd	r24, Y+55	; 0x37
    1860:	98 ad       	ldd	r25, Y+56	; 0x38
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	4a e7       	ldi	r20, 0x7A	; 122
    1868:	53 e4       	ldi	r21, 0x43	; 67
    186a:	0e 94 0a 02 	call	0x414	; 0x414 <__mulsf3>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	89 ab       	std	Y+49, r24	; 0x31
    1874:	9a ab       	std	Y+50, r25	; 0x32
    1876:	ab ab       	std	Y+51, r26	; 0x33
    1878:	bc ab       	std	Y+52, r27	; 0x34
    187a:	69 a9       	ldd	r22, Y+49	; 0x31
    187c:	7a a9       	ldd	r23, Y+50	; 0x32
	if (__tmp < 1.0)
    187e:	8b a9       	ldd	r24, Y+51	; 0x33
    1880:	9c a9       	ldd	r25, Y+52	; 0x34
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	40 e8       	ldi	r20, 0x80	; 128
    1888:	5f e3       	ldi	r21, 0x3F	; 63
    188a:	0e 94 04 04 	call	0x808	; 0x808 <__ltsf2>
    188e:	88 23       	and	r24, r24
    1890:	2c f4       	brge	.+10     	; 0x189c <LCD_displayCharacter+0x78>
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
    1896:	98 ab       	std	Y+48, r25	; 0x30
    1898:	8f a7       	std	Y+47, r24	; 0x2f
    189a:	3f c0       	rjmp	.+126    	; 0x191a <LCD_displayCharacter+0xf6>
    189c:	69 a9       	ldd	r22, Y+49	; 0x31
    189e:	7a a9       	ldd	r23, Y+50	; 0x32
	else if (__tmp > 65535)
    18a0:	8b a9       	ldd	r24, Y+51	; 0x33
    18a2:	9c a9       	ldd	r25, Y+52	; 0x34
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	3f ef       	ldi	r19, 0xFF	; 255
    18a8:	4f e7       	ldi	r20, 0x7F	; 127
    18aa:	57 e4       	ldi	r21, 0x47	; 71
    18ac:	0e 94 aa 03 	call	0x754	; 0x754 <__gtsf2>
    18b0:	18 16       	cp	r1, r24
    18b2:	4c f5       	brge	.+82     	; 0x1906 <LCD_displayCharacter+0xe2>
    18b4:	6d a9       	ldd	r22, Y+53	; 0x35
    18b6:	7e a9       	ldd	r23, Y+54	; 0x36
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b8:	8f a9       	ldd	r24, Y+55	; 0x37
    18ba:	98 ad       	ldd	r25, Y+56	; 0x38
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e2       	ldi	r20, 0x20	; 32
    18c2:	51 e4       	ldi	r21, 0x41	; 65
    18c4:	0e 94 0a 02 	call	0x414	; 0x414 <__mulsf3>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	bc 01       	movw	r22, r24
    18ce:	cd 01       	movw	r24, r26
    18d0:	0e 94 40 00 	call	0x80	; 0x80 <__fixunssfsi>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	98 ab       	std	Y+48, r25	; 0x30
    18da:	8f a7       	std	Y+47, r24	; 0x2f
    18dc:	0f c0       	rjmp	.+30     	; 0x18fc <LCD_displayCharacter+0xd8>
    18de:	89 e1       	ldi	r24, 0x19	; 25
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	9e a7       	std	Y+46, r25	; 0x2e
    18e4:	8d a7       	std	Y+45, r24	; 0x2d
    18e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    18e8:	9e a5       	ldd	r25, Y+46	; 0x2e
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	f1 f7       	brne	.-4      	; 0x18ea <LCD_displayCharacter+0xc6>
    18ee:	9e a7       	std	Y+46, r25	; 0x2e
    18f0:	8d a7       	std	Y+45, r24	; 0x2d
    18f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    18f4:	98 a9       	ldd	r25, Y+48	; 0x30
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	98 ab       	std	Y+48, r25	; 0x30
    18fa:	8f a7       	std	Y+47, r24	; 0x2f
    18fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    18fe:	98 a9       	ldd	r25, Y+48	; 0x30
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1900:	00 97       	sbiw	r24, 0x00	; 0
    1902:	69 f7       	brne	.-38     	; 0x18de <LCD_displayCharacter+0xba>
    1904:	14 c0       	rjmp	.+40     	; 0x192e <LCD_displayCharacter+0x10a>
    1906:	69 a9       	ldd	r22, Y+49	; 0x31
    1908:	7a a9       	ldd	r23, Y+50	; 0x32
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190a:	8b a9       	ldd	r24, Y+51	; 0x33
    190c:	9c a9       	ldd	r25, Y+52	; 0x34
    190e:	0e 94 40 00 	call	0x80	; 0x80 <__fixunssfsi>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	98 ab       	std	Y+48, r25	; 0x30
    1918:	8f a7       	std	Y+47, r24	; 0x2f
    191a:	8f a5       	ldd	r24, Y+47	; 0x2f
    191c:	98 a9       	ldd	r25, Y+48	; 0x30
    191e:	9c a7       	std	Y+44, r25	; 0x2c
    1920:	8b a7       	std	Y+43, r24	; 0x2b
    1922:	8b a5       	ldd	r24, Y+43	; 0x2b
    1924:	9c a5       	ldd	r25, Y+44	; 0x2c
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	f1 f7       	brne	.-4      	; 0x1926 <LCD_displayCharacter+0x102>
    192a:	9c a7       	std	Y+44, r25	; 0x2c
    192c:	8b a7       	std	Y+43, r24	; 0x2b
    192e:	83 e0       	ldi	r24, 0x03	; 3
    1930:	62 e0       	ldi	r22, 0x02	; 2
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1932:	41 e0       	ldi	r20, 0x01	; 1
    1934:	f1 db       	rcall	.-2078   	; 0x1118 <GPIO_writePin>
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	a0 e8       	ldi	r26, 0x80	; 128
    193c:	bf e3       	ldi	r27, 0x3F	; 63
    193e:	8f a3       	std	Y+39, r24	; 0x27
    1940:	98 a7       	std	Y+40, r25	; 0x28
    1942:	a9 a7       	std	Y+41, r26	; 0x29
    1944:	ba a7       	std	Y+42, r27	; 0x2a
    1946:	6f a1       	ldd	r22, Y+39	; 0x27
    1948:	78 a5       	ldd	r23, Y+40	; 0x28
    194a:	89 a5       	ldd	r24, Y+41	; 0x29
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194c:	9a a5       	ldd	r25, Y+42	; 0x2a
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	4a e7       	ldi	r20, 0x7A	; 122
    1954:	53 e4       	ldi	r21, 0x43	; 67
    1956:	0e 94 0a 02 	call	0x414	; 0x414 <__mulsf3>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	8b a3       	std	Y+35, r24	; 0x23
    1960:	9c a3       	std	Y+36, r25	; 0x24
    1962:	ad a3       	std	Y+37, r26	; 0x25
    1964:	be a3       	std	Y+38, r27	; 0x26
    1966:	6b a1       	ldd	r22, Y+35	; 0x23
    1968:	7c a1       	ldd	r23, Y+36	; 0x24
    196a:	8d a1       	ldd	r24, Y+37	; 0x25
	if (__tmp < 1.0)
    196c:	9e a1       	ldd	r25, Y+38	; 0x26
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	40 e8       	ldi	r20, 0x80	; 128
    1974:	5f e3       	ldi	r21, 0x3F	; 63
    1976:	0e 94 04 04 	call	0x808	; 0x808 <__ltsf2>
    197a:	88 23       	and	r24, r24
    197c:	2c f4       	brge	.+10     	; 0x1988 <LCD_displayCharacter+0x164>
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	9a a3       	std	Y+34, r25	; 0x22
		__ticks = 1;
    1984:	89 a3       	std	Y+33, r24	; 0x21
    1986:	3f c0       	rjmp	.+126    	; 0x1a06 <LCD_displayCharacter+0x1e2>
    1988:	6b a1       	ldd	r22, Y+35	; 0x23
    198a:	7c a1       	ldd	r23, Y+36	; 0x24
    198c:	8d a1       	ldd	r24, Y+37	; 0x25
	else if (__tmp > 65535)
    198e:	9e a1       	ldd	r25, Y+38	; 0x26
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	3f ef       	ldi	r19, 0xFF	; 255
    1994:	4f e7       	ldi	r20, 0x7F	; 127
    1996:	57 e4       	ldi	r21, 0x47	; 71
    1998:	0e 94 aa 03 	call	0x754	; 0x754 <__gtsf2>
    199c:	18 16       	cp	r1, r24
    199e:	4c f5       	brge	.+82     	; 0x19f2 <LCD_displayCharacter+0x1ce>
    19a0:	6f a1       	ldd	r22, Y+39	; 0x27
    19a2:	78 a5       	ldd	r23, Y+40	; 0x28
    19a4:	89 a5       	ldd	r24, Y+41	; 0x29
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	40 e2       	ldi	r20, 0x20	; 32
    19ae:	51 e4       	ldi	r21, 0x41	; 65
    19b0:	0e 94 0a 02 	call	0x414	; 0x414 <__mulsf3>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	bc 01       	movw	r22, r24
    19ba:	cd 01       	movw	r24, r26
    19bc:	0e 94 40 00 	call	0x80	; 0x80 <__fixunssfsi>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	9a a3       	std	Y+34, r25	; 0x22
    19c6:	89 a3       	std	Y+33, r24	; 0x21
    19c8:	0f c0       	rjmp	.+30     	; 0x19e8 <LCD_displayCharacter+0x1c4>
    19ca:	89 e1       	ldi	r24, 0x19	; 25
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	98 a3       	std	Y+32, r25	; 0x20
    19d0:	8f 8f       	std	Y+31, r24	; 0x1f
    19d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19d4:	98 a1       	ldd	r25, Y+32	; 0x20
    19d6:	01 97       	sbiw	r24, 0x01	; 1
    19d8:	f1 f7       	brne	.-4      	; 0x19d6 <LCD_displayCharacter+0x1b2>
    19da:	98 a3       	std	Y+32, r25	; 0x20
    19dc:	8f 8f       	std	Y+31, r24	; 0x1f
    19de:	89 a1       	ldd	r24, Y+33	; 0x21
    19e0:	9a a1       	ldd	r25, Y+34	; 0x22
    19e2:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e4:	9a a3       	std	Y+34, r25	; 0x22
    19e6:	89 a3       	std	Y+33, r24	; 0x21
    19e8:	89 a1       	ldd	r24, Y+33	; 0x21
    19ea:	9a a1       	ldd	r25, Y+34	; 0x22
    19ec:	00 97       	sbiw	r24, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ee:	69 f7       	brne	.-38     	; 0x19ca <LCD_displayCharacter+0x1a6>
    19f0:	14 c0       	rjmp	.+40     	; 0x1a1a <LCD_displayCharacter+0x1f6>
    19f2:	6b a1       	ldd	r22, Y+35	; 0x23
    19f4:	7c a1       	ldd	r23, Y+36	; 0x24
    19f6:	8d a1       	ldd	r24, Y+37	; 0x25
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f8:	9e a1       	ldd	r25, Y+38	; 0x26
    19fa:	0e 94 40 00 	call	0x80	; 0x80 <__fixunssfsi>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	9a a3       	std	Y+34, r25	; 0x22
    1a04:	89 a3       	std	Y+33, r24	; 0x21
    1a06:	89 a1       	ldd	r24, Y+33	; 0x21
    1a08:	9a a1       	ldd	r25, Y+34	; 0x22
    1a0a:	9e 8f       	std	Y+30, r25	; 0x1e
    1a0c:	8d 8f       	std	Y+29, r24	; 0x1d
    1a0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a10:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	f1 f7       	brne	.-4      	; 0x1a12 <LCD_displayCharacter+0x1ee>
    1a16:	9e 8f       	std	Y+30, r25	; 0x1e
    1a18:	8d 8f       	std	Y+29, r24	; 0x1d
    1a1a:	82 e0       	ldi	r24, 0x02	; 2
    1a1c:	69 ad       	ldd	r22, Y+57	; 0x39
    1a1e:	ba dc       	rcall	.-1676   	; 0x1394 <GPIO_writePort>
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	a0 e8       	ldi	r26, 0x80	; 128
    1a26:	bf e3       	ldi	r27, 0x3F	; 63
    1a28:	89 8f       	std	Y+25, r24	; 0x19
    1a2a:	9a 8f       	std	Y+26, r25	; 0x1a
    1a2c:	ab 8f       	std	Y+27, r26	; 0x1b
    1a2e:	bc 8f       	std	Y+28, r27	; 0x1c
    1a30:	69 8d       	ldd	r22, Y+25	; 0x19
    1a32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a36:	9c 8d       	ldd	r25, Y+28	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	4a e7       	ldi	r20, 0x7A	; 122
    1a3e:	53 e4       	ldi	r21, 0x43	; 67
    1a40:	0e 94 0a 02 	call	0x414	; 0x414 <__mulsf3>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	8d 8b       	std	Y+21, r24	; 0x15
    1a4a:	9e 8b       	std	Y+22, r25	; 0x16
    1a4c:	af 8b       	std	Y+23, r26	; 0x17
    1a4e:	b8 8f       	std	Y+24, r27	; 0x18
    1a50:	6d 89       	ldd	r22, Y+21	; 0x15
    1a52:	7e 89       	ldd	r23, Y+22	; 0x16
    1a54:	8f 89       	ldd	r24, Y+23	; 0x17
    1a56:	98 8d       	ldd	r25, Y+24	; 0x18
	if (__tmp < 1.0)
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	40 e8       	ldi	r20, 0x80	; 128
    1a5e:	5f e3       	ldi	r21, 0x3F	; 63
    1a60:	0e 94 04 04 	call	0x808	; 0x808 <__ltsf2>
    1a64:	88 23       	and	r24, r24
    1a66:	2c f4       	brge	.+10     	; 0x1a72 <LCD_displayCharacter+0x24e>
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	9c 8b       	std	Y+20, r25	; 0x14
    1a6e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
    1a70:	3f c0       	rjmp	.+126    	; 0x1af0 <LCD_displayCharacter+0x2cc>
    1a72:	6d 89       	ldd	r22, Y+21	; 0x15
    1a74:	7e 89       	ldd	r23, Y+22	; 0x16
    1a76:	8f 89       	ldd	r24, Y+23	; 0x17
    1a78:	98 8d       	ldd	r25, Y+24	; 0x18
	else if (__tmp > 65535)
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	3f ef       	ldi	r19, 0xFF	; 255
    1a7e:	4f e7       	ldi	r20, 0x7F	; 127
    1a80:	57 e4       	ldi	r21, 0x47	; 71
    1a82:	0e 94 aa 03 	call	0x754	; 0x754 <__gtsf2>
    1a86:	18 16       	cp	r1, r24
    1a88:	4c f5       	brge	.+82     	; 0x1adc <LCD_displayCharacter+0x2b8>
    1a8a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a90:	9c 8d       	ldd	r25, Y+28	; 0x1c
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	40 e2       	ldi	r20, 0x20	; 32
    1a98:	51 e4       	ldi	r21, 0x41	; 65
    1a9a:	0e 94 0a 02 	call	0x414	; 0x414 <__mulsf3>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	bc 01       	movw	r22, r24
    1aa4:	cd 01       	movw	r24, r26
    1aa6:	0e 94 40 00 	call	0x80	; 0x80 <__fixunssfsi>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	9c 8b       	std	Y+20, r25	; 0x14
    1ab0:	8b 8b       	std	Y+19, r24	; 0x13
    1ab2:	0f c0       	rjmp	.+30     	; 0x1ad2 <LCD_displayCharacter+0x2ae>
    1ab4:	89 e1       	ldi	r24, 0x19	; 25
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	9a 8b       	std	Y+18, r25	; 0x12
    1aba:	89 8b       	std	Y+17, r24	; 0x11
    1abc:	89 89       	ldd	r24, Y+17	; 0x11
    1abe:	9a 89       	ldd	r25, Y+18	; 0x12
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	f1 f7       	brne	.-4      	; 0x1ac0 <LCD_displayCharacter+0x29c>
    1ac4:	9a 8b       	std	Y+18, r25	; 0x12
    1ac6:	89 8b       	std	Y+17, r24	; 0x11
    1ac8:	8b 89       	ldd	r24, Y+19	; 0x13
    1aca:	9c 89       	ldd	r25, Y+20	; 0x14
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	9c 8b       	std	Y+20, r25	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad0:	8b 8b       	std	Y+19, r24	; 0x13
    1ad2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad6:	00 97       	sbiw	r24, 0x00	; 0
    1ad8:	69 f7       	brne	.-38     	; 0x1ab4 <LCD_displayCharacter+0x290>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ada:	14 c0       	rjmp	.+40     	; 0x1b04 <LCD_displayCharacter+0x2e0>
    1adc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ade:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae2:	98 8d       	ldd	r25, Y+24	; 0x18
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae4:	0e 94 40 00 	call	0x80	; 0x80 <__fixunssfsi>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	9c 8b       	std	Y+20, r25	; 0x14
    1aee:	8b 8b       	std	Y+19, r24	; 0x13
    1af0:	8b 89       	ldd	r24, Y+19	; 0x13
    1af2:	9c 89       	ldd	r25, Y+20	; 0x14
    1af4:	98 8b       	std	Y+16, r25	; 0x10
    1af6:	8f 87       	std	Y+15, r24	; 0x0f
    1af8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1afa:	98 89       	ldd	r25, Y+16	; 0x10
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	f1 f7       	brne	.-4      	; 0x1afc <LCD_displayCharacter+0x2d8>
    1b00:	98 8b       	std	Y+16, r25	; 0x10
    1b02:	8f 87       	std	Y+15, r24	; 0x0f
    1b04:	83 e0       	ldi	r24, 0x03	; 3
    1b06:	62 e0       	ldi	r22, 0x02	; 2
    1b08:	40 e0       	ldi	r20, 0x00	; 0
    1b0a:	06 db       	rcall	.-2548   	; 0x1118 <GPIO_writePin>
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	a0 e8       	ldi	r26, 0x80	; 128
    1b12:	bf e3       	ldi	r27, 0x3F	; 63
    1b14:	8b 87       	std	Y+11, r24	; 0x0b
    1b16:	9c 87       	std	Y+12, r25	; 0x0c
    1b18:	ad 87       	std	Y+13, r26	; 0x0d
    1b1a:	be 87       	std	Y+14, r27	; 0x0e
    1b1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b24:	20 e0       	ldi	r18, 0x00	; 0
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	4a e7       	ldi	r20, 0x7A	; 122
    1b2a:	53 e4       	ldi	r21, 0x43	; 67
    1b2c:	0e 94 0a 02 	call	0x414	; 0x414 <__mulsf3>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	8f 83       	std	Y+7, r24	; 0x07
    1b36:	98 87       	std	Y+8, r25	; 0x08
    1b38:	a9 87       	std	Y+9, r26	; 0x09
    1b3a:	ba 87       	std	Y+10, r27	; 0x0a
    1b3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3e:	78 85       	ldd	r23, Y+8	; 0x08
    1b40:	89 85       	ldd	r24, Y+9	; 0x09
    1b42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b44:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	40 e8       	ldi	r20, 0x80	; 128
    1b4a:	5f e3       	ldi	r21, 0x3F	; 63
    1b4c:	0e 94 04 04 	call	0x808	; 0x808 <__ltsf2>
    1b50:	88 23       	and	r24, r24
    1b52:	2c f4       	brge	.+10     	; 0x1b5e <LCD_displayCharacter+0x33a>
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	9e 83       	std	Y+6, r25	; 0x06
    1b5a:	8d 83       	std	Y+5, r24	; 0x05
    1b5c:	3f c0       	rjmp	.+126    	; 0x1bdc <LCD_displayCharacter+0x3b8>
		__ticks = 1;
    1b5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b60:	78 85       	ldd	r23, Y+8	; 0x08
    1b62:	89 85       	ldd	r24, Y+9	; 0x09
    1b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b66:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
    1b68:	3f ef       	ldi	r19, 0xFF	; 255
    1b6a:	4f e7       	ldi	r20, 0x7F	; 127
    1b6c:	57 e4       	ldi	r21, 0x47	; 71
    1b6e:	0e 94 aa 03 	call	0x754	; 0x754 <__gtsf2>
    1b72:	18 16       	cp	r1, r24
    1b74:	4c f5       	brge	.+82     	; 0x1bc8 <LCD_displayCharacter+0x3a4>
    1b76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	40 e2       	ldi	r20, 0x20	; 32
    1b84:	51 e4       	ldi	r21, 0x41	; 65
    1b86:	0e 94 0a 02 	call	0x414	; 0x414 <__mulsf3>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	bc 01       	movw	r22, r24
    1b90:	cd 01       	movw	r24, r26
    1b92:	0e 94 40 00 	call	0x80	; 0x80 <__fixunssfsi>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	9e 83       	std	Y+6, r25	; 0x06
    1b9c:	8d 83       	std	Y+5, r24	; 0x05
    1b9e:	0f c0       	rjmp	.+30     	; 0x1bbe <LCD_displayCharacter+0x39a>
    1ba0:	89 e1       	ldi	r24, 0x19	; 25
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	9c 83       	std	Y+4, r25	; 0x04
    1ba6:	8b 83       	std	Y+3, r24	; 0x03
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	f1 f7       	brne	.-4      	; 0x1bac <LCD_displayCharacter+0x388>
    1bb0:	9c 83       	std	Y+4, r25	; 0x04
    1bb2:	8b 83       	std	Y+3, r24	; 0x03
    1bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	9e 83       	std	Y+6, r25	; 0x06
    1bbc:	8d 83       	std	Y+5, r24	; 0x05
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc2:	00 97       	sbiw	r24, 0x00	; 0
    1bc4:	69 f7       	brne	.-38     	; 0x1ba0 <LCD_displayCharacter+0x37c>
    1bc6:	14 c0       	rjmp	.+40     	; 0x1bf0 <LCD_displayCharacter+0x3cc>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bca:	78 85       	ldd	r23, Y+8	; 0x08
    1bcc:	89 85       	ldd	r24, Y+9	; 0x09
    1bce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd0:	0e 94 40 00 	call	0x80	; 0x80 <__fixunssfsi>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	9e 83       	std	Y+6, r25	; 0x06
    1bda:	8d 83       	std	Y+5, r24	; 0x05
    1bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bde:	9e 81       	ldd	r25, Y+6	; 0x06
    1be0:	9a 83       	std	Y+2, r25	; 0x02
    1be2:	89 83       	std	Y+1, r24	; 0x01
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	9a 81       	ldd	r25, Y+2	; 0x02
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	f1 f7       	brne	.-4      	; 0x1be8 <LCD_displayCharacter+0x3c4>
    1bec:	9a 83       	std	Y+2, r25	; 0x02
    1bee:	89 83       	std	Y+1, r24	; 0x01
    1bf0:	e9 96       	adiw	r28, 0x39	; 57
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	cf 91       	pop	r28
    1bfe:	df 91       	pop	r29
    1c00:	08 95       	ret

00001c02 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1c02:	df 93       	push	r29
    1c04:	cf 93       	push	r28
    1c06:	00 d0       	rcall	.+0      	; 0x1c08 <LCD_displayString+0x6>
    1c08:	0f 92       	push	r0
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	9b 83       	std	Y+3, r25	; 0x03
    1c10:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1c12:	19 82       	std	Y+1, r1	; 0x01
    1c14:	0d c0       	rjmp	.+26     	; 0x1c30 <LCD_displayString+0x2e>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	28 2f       	mov	r18, r24
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c20:	fc 01       	movw	r30, r24
    1c22:	e2 0f       	add	r30, r18
    1c24:	f3 1f       	adc	r31, r19
    1c26:	80 81       	ld	r24, Z
    1c28:	fd dd       	rcall	.-1030   	; 0x1824 <LCD_displayCharacter>
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
		i++;
    1c2c:	8f 5f       	subi	r24, 0xFF	; 255
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	8a 81       	ldd	r24, Y+2	; 0x02
    1c38:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	e2 0f       	add	r30, r18
    1c3e:	f3 1f       	adc	r31, r19
    1c40:	80 81       	ld	r24, Z
    1c42:	88 23       	and	r24, r24
    1c44:	41 f7       	brne	.-48     	; 0x1c16 <LCD_displayString+0x14>
    1c46:	0f 90       	pop	r0
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	cf 91       	pop	r28
    1c4e:	df 91       	pop	r29
    1c50:	08 95       	ret

00001c52 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1c52:	df 93       	push	r29
    1c54:	cf 93       	push	r28
    1c56:	00 d0       	rcall	.+0      	; 0x1c58 <LCD_moveCursor+0x6>
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <LCD_moveCursor+0x8>
    1c5a:	0f 92       	push	r0
    1c5c:	cd b7       	in	r28, 0x3d	; 61
    1c5e:	de b7       	in	r29, 0x3e	; 62
    1c60:	8a 83       	std	Y+2, r24	; 0x02
    1c62:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	3d 83       	std	Y+5, r19	; 0x05
    1c6c:	2c 83       	std	Y+4, r18	; 0x04
    1c6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c70:	9d 81       	ldd	r25, Y+5	; 0x05
    1c72:	81 30       	cpi	r24, 0x01	; 1
    1c74:	91 05       	cpc	r25, r1
    1c76:	c1 f0       	breq	.+48     	; 0x1ca8 <LCD_moveCursor+0x56>
    1c78:	2c 81       	ldd	r18, Y+4	; 0x04
    1c7a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c7c:	22 30       	cpi	r18, 0x02	; 2
    1c7e:	31 05       	cpc	r19, r1
    1c80:	2c f4       	brge	.+10     	; 0x1c8c <LCD_moveCursor+0x3a>
    1c82:	8c 81       	ldd	r24, Y+4	; 0x04
    1c84:	9d 81       	ldd	r25, Y+5	; 0x05
    1c86:	00 97       	sbiw	r24, 0x00	; 0
    1c88:	61 f0       	breq	.+24     	; 0x1ca2 <LCD_moveCursor+0x50>
    1c8a:	19 c0       	rjmp	.+50     	; 0x1cbe <LCD_moveCursor+0x6c>
    1c8c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c8e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c90:	22 30       	cpi	r18, 0x02	; 2
    1c92:	31 05       	cpc	r19, r1
    1c94:	69 f0       	breq	.+26     	; 0x1cb0 <LCD_moveCursor+0x5e>
    1c96:	8c 81       	ldd	r24, Y+4	; 0x04
    1c98:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9a:	83 30       	cpi	r24, 0x03	; 3
    1c9c:	91 05       	cpc	r25, r1
    1c9e:	61 f0       	breq	.+24     	; 0x1cb8 <LCD_moveCursor+0x66>
    1ca0:	0e c0       	rjmp	.+28     	; 0x1cbe <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	89 83       	std	Y+1, r24	; 0x01
    1ca6:	0b c0       	rjmp	.+22     	; 0x1cbe <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	80 5c       	subi	r24, 0xC0	; 192
    1cac:	89 83       	std	Y+1, r24	; 0x01
    1cae:	07 c0       	rjmp	.+14     	; 0x1cbe <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	80 5f       	subi	r24, 0xF0	; 240
    1cb4:	89 83       	std	Y+1, r24	; 0x01
    1cb6:	03 c0       	rjmp	.+6      	; 0x1cbe <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	80 5b       	subi	r24, 0xB0	; 176
    1cbc:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	80 68       	ori	r24, 0x80	; 128
    1cc2:	c8 db       	rcall	.-2160   	; 0x1454 <LCD_sendCommand>
    1cc4:	0f 90       	pop	r0
}
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	cf 91       	pop	r28
    1cd0:	df 91       	pop	r29
    1cd2:	08 95       	ret

00001cd4 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	00 d0       	rcall	.+0      	; 0x1cda <LCD_displayStringRowColumn+0x6>
    1cda:	00 d0       	rcall	.+0      	; 0x1cdc <LCD_displayStringRowColumn+0x8>
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	89 83       	std	Y+1, r24	; 0x01
    1ce2:	6a 83       	std	Y+2, r22	; 0x02
    1ce4:	5c 83       	std	Y+4, r21	; 0x04
    1ce6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	6a 81       	ldd	r22, Y+2	; 0x02
    1cec:	b2 df       	rcall	.-156    	; 0x1c52 <LCD_moveCursor>
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
	LCD_displayString(Str); /* display the string */
    1cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf2:	87 df       	rcall	.-242    	; 0x1c02 <LCD_displayString>
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
}
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	08 95       	ret

00001d02 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
    1d0a:	62 97       	sbiw	r28, 0x12	; 18
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	de bf       	out	0x3e, r29	; 62
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	cd bf       	out	0x3d, r28	; 61
    1d16:	9a 8b       	std	Y+18, r25	; 0x12
    1d18:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1d1a:	89 89       	ldd	r24, Y+17	; 0x11
    1d1c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d1e:	9e 01       	movw	r18, r28
    1d20:	2f 5f       	subi	r18, 0xFF	; 255
    1d22:	3f 4f       	sbci	r19, 0xFF	; 255
    1d24:	b9 01       	movw	r22, r18
    1d26:	4a e0       	ldi	r20, 0x0A	; 10
    1d28:	50 e0       	ldi	r21, 0x00	; 0
    1d2a:	94 d1       	rcall	.+808    	; 0x2054 <itoa>
    1d2c:	ce 01       	movw	r24, r28
   LCD_displayString(buff); /* Display the string */
    1d2e:	01 96       	adiw	r24, 0x01	; 1
    1d30:	68 df       	rcall	.-304    	; 0x1c02 <LCD_displayString>
    1d32:	62 96       	adiw	r28, 0x12	; 18
    1d34:	0f b6       	in	r0, 0x3f	; 63
}
    1d36:	f8 94       	cli
    1d38:	de bf       	out	0x3e, r29	; 62
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	cd bf       	out	0x3d, r28	; 61
    1d3e:	cf 91       	pop	r28
    1d40:	df 91       	pop	r29
    1d42:	08 95       	ret

00001d44 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1d44:	df 93       	push	r29
    1d46:	cf 93       	push	r28
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	82 db       	rcall	.-2300   	; 0x1454 <LCD_sendCommand>
    1d50:	cf 91       	pop	r28
}
    1d52:	df 91       	pop	r29
    1d54:	08 95       	ret

00001d56 <LM35_getTemperature>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_getTemperature(void)
{
    1d56:	df 93       	push	r29
    1d58:	cf 93       	push	r28
    1d5a:	00 d0       	rcall	.+0      	; 0x1d5c <LM35_getTemperature+0x6>
    1d5c:	0f 92       	push	r0
    1d5e:	cd b7       	in	r28, 0x3d	; 61
    1d60:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value = 0;
    1d62:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    1d64:	1a 82       	std	Y+2, r1	; 0x02
    1d66:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    1d68:	82 e0       	ldi	r24, 0x02	; 2
    1d6a:	73 d8       	rcall	.-3866   	; 0xe52 <ADC_readChannel>
    1d6c:	9a 83       	std	Y+2, r25	; 0x02
    1d6e:	89 83       	std	Y+1, r24	; 0x01
    1d70:	89 81       	ldd	r24, Y+1	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    1d72:	9a 81       	ldd	r25, Y+2	; 0x02
    1d74:	cc 01       	movw	r24, r24
    1d76:	a0 e0       	ldi	r26, 0x00	; 0
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	26 e9       	ldi	r18, 0x96	; 150
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e0       	ldi	r20, 0x00	; 0
    1d80:	50 e0       	ldi	r21, 0x00	; 0
    1d82:	bc 01       	movw	r22, r24
    1d84:	cd 01       	movw	r24, r26
    1d86:	10 d1       	rcall	.+544    	; 0x1fa8 <__mulsi3>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	bc 01       	movw	r22, r24
    1d8e:	cd 01       	movw	r24, r26
    1d90:	0e 94 84 04 	call	0x908	; 0x908 <__floatunsisf>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	bc 01       	movw	r22, r24
    1d9a:	cd 01       	movw	r24, r26
    1d9c:	2a e0       	ldi	r18, 0x0A	; 10
    1d9e:	37 ed       	ldi	r19, 0xD7	; 215
    1da0:	43 e2       	ldi	r20, 0x23	; 35
    1da2:	50 e4       	ldi	r21, 0x40	; 64
    1da4:	0e 94 0a 02 	call	0x414	; 0x414 <__mulsf3>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	bc 01       	movw	r22, r24
    1dae:	cd 01       	movw	r24, r26
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 ed       	ldi	r19, 0xD0	; 208
    1db4:	4f eb       	ldi	r20, 0xBF	; 191
    1db6:	54 e4       	ldi	r21, 0x44	; 68
    1db8:	0e 94 01 03 	call	0x602	; 0x602 <__divsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	bc 01       	movw	r22, r24
    1dc2:	cd 01       	movw	r24, r26
    1dc4:	0e 94 40 00 	call	0x80	; 0x80 <__fixunssfsi>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	8b 83       	std	Y+3, r24	; 0x03
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	0f 90       	pop	r0

	return temp_value;
    1dd2:	0f 90       	pop	r0
}
    1dd4:	0f 90       	pop	r0
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <main>:
#include "lm35_sensor.h"
#include "dcmotor.h"
#include "adc.h"

void main(void)
{
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
    1de4:	2b 97       	sbiw	r28, 0x0b	; 11
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	de bf       	out	0x3e, r29	; 62
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	cd bf       	out	0x3d, r28	; 61
	ADC_ConfigType  Config_Struct;
	Config_Struct.ref_volt = 0x03; /*Internal 2.56 voltage Reference with external cap at AREF pin*/
    1df0:	83 e0       	ldi	r24, 0x03	; 3
    1df2:	8a 87       	std	Y+10, r24	; 0x0a
	Config_Struct.prescaler =  0x03;  /*Division by 8*/
    1df4:	83 e0       	ldi	r24, 0x03	; 3
    1df6:	8b 87       	std	Y+11, r24	; 0x0b
	/*Defining a pointer to constant structure to pass it for the init function */
	const ADC_ConfigType * Config_Ptr = &Config_Struct;
    1df8:	ce 01       	movw	r24, r28
    1dfa:	0a 96       	adiw	r24, 0x0a	; 10
    1dfc:	99 87       	std	Y+9, r25	; 0x09
    1dfe:	88 87       	std	Y+8, r24	; 0x08

	/*Initializing the drivers */
	LCD_init();
    1e00:	0d db       	rcall	.-2534   	; 0x141c <LCD_init>
    1e02:	57 d8       	rcall	.-3922   	; 0xeb2 <DcMotor_Init>
	DcMotor_Init();
    1e04:	88 85       	ldd	r24, Y+8	; 0x08
    1e06:	99 85       	ldd	r25, Y+9	; 0x09
	ADC_init(Config_Ptr);
    1e08:	0e 94 f0 06 	call	0xde0	; 0xde0 <ADC_init>
    1e0c:	80 e6       	ldi	r24, 0x60	; 96
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
	uint8 temperature;/*Variable to store the reading of temperature*/
	/*Storing strings in arrays that will be displayed */
	const char * str_off_Ptr = "FAN is OFF";
    1e10:	9e 83       	std	Y+6, r25	; 0x06
    1e12:	8d 83       	std	Y+5, r24	; 0x05
    1e14:	8b e6       	ldi	r24, 0x6B	; 107
    1e16:	90 e0       	ldi	r25, 0x00	; 0
	const char * str_on_Ptr = "FAN is ON ";
    1e18:	9c 83       	std	Y+4, r25	; 0x04
    1e1a:	8b 83       	std	Y+3, r24	; 0x03
    1e1c:	86 e7       	ldi	r24, 0x76	; 118
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
	const char * str_temp_Ptr = "Temp =     C";
    1e20:	9a 83       	std	Y+2, r25	; 0x02
    1e22:	89 83       	std	Y+1, r24	; 0x01
    1e24:	8f df       	rcall	.-226    	; 0x1d44 <LCD_clearScreen>
    1e26:	29 81       	ldd	r18, Y+1	; 0x01
	LCD_clearScreen();/*First clearing the lcd*/
    1e28:	3a 81       	ldd	r19, Y+2	; 0x02
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
	/*Printing temp = because it will always be displayed*/
	LCD_displayStringRowColumn(1, 3, str_temp_Ptr);
    1e2c:	63 e0       	ldi	r22, 0x03	; 3
    1e2e:	a9 01       	movw	r20, r18
    1e30:	51 df       	rcall	.-350    	; 0x1cd4 <LCD_displayStringRowColumn>
    1e32:	91 df       	rcall	.-222    	; 0x1d56 <LM35_getTemperature>
    1e34:	8f 83       	std	Y+7, r24	; 0x07
    1e36:	8f 81       	ldd	r24, Y+7	; 0x07
    1e38:	8e 31       	cpi	r24, 0x1E	; 30


	while(1)
	{
		/*Variable to store the temp read*/
		temperature = LM35_getTemperature();/*GETTING TEMP READ*/
    1e3a:	88 f4       	brcc	.+34     	; 0x1e5e <main+0x82>
    1e3c:	2d 81       	ldd	r18, Y+5	; 0x05
    1e3e:	3e 81       	ldd	r19, Y+6	; 0x06

		if(temperature < 30 )
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	63 e0       	ldi	r22, 0x03	; 3
    1e44:	a9 01       	movw	r20, r18
		{
			/*FAN is OFF*/
			LCD_displayStringRowColumn( 0 , 3 , str_off_Ptr);
    1e46:	46 df       	rcall	.-372    	; 0x1cd4 <LCD_displayStringRowColumn>
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	6a e0       	ldi	r22, 0x0A	; 10
    1e4c:	02 df       	rcall	.-508    	; 0x1c52 <LCD_moveCursor>
    1e4e:	8f 81       	ldd	r24, Y+7	; 0x07
    1e50:	88 2f       	mov	r24, r24
    1e52:	90 e0       	ldi	r25, 0x00	; 0
			LCD_moveCursor(1 , 10);/*moving cursor to write the temp value*/
    1e54:	56 df       	rcall	.-340    	; 0x1d02 <LCD_intgerToString>
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	60 e0       	ldi	r22, 0x00	; 0
    1e5a:	42 d8       	rcall	.-3964   	; 0xee0 <DcMotor_Rotate>
			LCD_intgerToString(temperature); /*displaying the temp after moving the cursor*/
    1e5c:	50 c0       	rjmp	.+160    	; 0x1efe <main+0x122>
    1e5e:	8f 81       	ldd	r24, Y+7	; 0x07
    1e60:	8c 33       	cpi	r24, 0x3C	; 60
    1e62:	88 f4       	brcc	.+34     	; 0x1e86 <main+0xaa>
    1e64:	2b 81       	ldd	r18, Y+3	; 0x03
			DcMotor_Rotate(STOP, 0 ); /*STOPPING THE MOTOR*/
    1e66:	3c 81       	ldd	r19, Y+4	; 0x04
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	63 e0       	ldi	r22, 0x03	; 3
    1e6c:	a9 01       	movw	r20, r18
    1e6e:	32 df       	rcall	.-412    	; 0x1cd4 <LCD_displayStringRowColumn>
		}

		else if(temperature < 60 )
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	6a e0       	ldi	r22, 0x0A	; 10
    1e74:	ee de       	rcall	.-548    	; 0x1c52 <LCD_moveCursor>
		{
			/*FAN is ON*/
			LCD_displayStringRowColumn( 0 , 3 , str_on_Ptr);
    1e76:	8f 81       	ldd	r24, Y+7	; 0x07
    1e78:	88 2f       	mov	r24, r24
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	42 df       	rcall	.-380    	; 0x1d02 <LCD_intgerToString>
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	69 e1       	ldi	r22, 0x19	; 25
    1e82:	2e d8       	rcall	.-4004   	; 0xee0 <DcMotor_Rotate>
			LCD_moveCursor(1 , 10);/*moving cursor to write the temp value*/
    1e84:	3c c0       	rjmp	.+120    	; 0x1efe <main+0x122>
    1e86:	8f 81       	ldd	r24, Y+7	; 0x07
    1e88:	8a 35       	cpi	r24, 0x5A	; 90
    1e8a:	88 f4       	brcc	.+34     	; 0x1eae <main+0xd2>
			LCD_intgerToString(temperature); /*displaying the temp after moving the cursor*/
    1e8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	63 e0       	ldi	r22, 0x03	; 3
    1e94:	a9 01       	movw	r20, r18
			DcMotor_Rotate(CW, 25 ); /*THE MOTOR WORKS WITH 25% SPEED*/
    1e96:	1e df       	rcall	.-452    	; 0x1cd4 <LCD_displayStringRowColumn>
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	6a e0       	ldi	r22, 0x0A	; 10
    1e9c:	da de       	rcall	.-588    	; 0x1c52 <LCD_moveCursor>
    1e9e:	8f 81       	ldd	r24, Y+7	; 0x07
		}

		else if(temperature < 90 )
    1ea0:	88 2f       	mov	r24, r24
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	2e df       	rcall	.-420    	; 0x1d02 <LCD_intgerToString>
		{
			/*FAN is ON*/
			LCD_displayStringRowColumn( 0 , 3 , str_on_Ptr);
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	62 e3       	ldi	r22, 0x32	; 50
    1eaa:	1a d8       	rcall	.-4044   	; 0xee0 <DcMotor_Rotate>
    1eac:	28 c0       	rjmp	.+80     	; 0x1efe <main+0x122>
    1eae:	8f 81       	ldd	r24, Y+7	; 0x07
    1eb0:	88 37       	cpi	r24, 0x78	; 120
    1eb2:	88 f4       	brcc	.+34     	; 0x1ed6 <main+0xfa>
			LCD_moveCursor(1 , 10);/*moving cursor to write the temp value*/
    1eb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	63 e0       	ldi	r22, 0x03	; 3
			LCD_intgerToString(temperature); /*displaying the temp after moving the cursor*/
    1ebc:	a9 01       	movw	r20, r18
    1ebe:	0a df       	rcall	.-492    	; 0x1cd4 <LCD_displayStringRowColumn>
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	6a e0       	ldi	r22, 0x0A	; 10
    1ec4:	c6 de       	rcall	.-628    	; 0x1c52 <LCD_moveCursor>
			DcMotor_Rotate(CW, 50 ); /*THE MOTOR WORKS WITH 50% SPEED*/
    1ec6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ec8:	88 2f       	mov	r24, r24
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	1a df       	rcall	.-460    	; 0x1d02 <LCD_intgerToString>
    1ece:	81 e0       	ldi	r24, 0x01	; 1
		}
		else if(temperature < 120 )
    1ed0:	6b e4       	ldi	r22, 0x4B	; 75
    1ed2:	06 d8       	rcall	.-4084   	; 0xee0 <DcMotor_Rotate>
    1ed4:	14 c0       	rjmp	.+40     	; 0x1efe <main+0x122>
		{
			/*FAN is ON*/
			LCD_displayStringRowColumn( 0 , 3 , str_on_Ptr);
    1ed6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ed8:	88 37       	cpi	r24, 0x78	; 120
    1eda:	88 f0       	brcs	.+34     	; 0x1efe <main+0x122>
    1edc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ede:	3c 81       	ldd	r19, Y+4	; 0x04
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	63 e0       	ldi	r22, 0x03	; 3
			LCD_moveCursor(1 , 10);/*moving cursor to write the temp value*/
    1ee4:	a9 01       	movw	r20, r18
    1ee6:	f6 de       	rcall	.-532    	; 0x1cd4 <LCD_displayStringRowColumn>
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	6a e0       	ldi	r22, 0x0A	; 10
			LCD_intgerToString(temperature); /*displaying the temp after moving the cursor*/
    1eec:	b2 de       	rcall	.-668    	; 0x1c52 <LCD_moveCursor>
    1eee:	8f 81       	ldd	r24, Y+7	; 0x07
    1ef0:	88 2f       	mov	r24, r24
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	06 df       	rcall	.-500    	; 0x1d02 <LCD_intgerToString>
			DcMotor_Rotate(CW, 75 ); /*THE MOTOR WORKS WITH 75% SPEED*/
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	64 e6       	ldi	r22, 0x64	; 100
    1efa:	0e 94 70 07 	call	0xee0	; 0xee0 <DcMotor_Rotate>
    1efe:	8f 81       	ldd	r24, Y+7	; 0x07
		}
		else if(temperature >= 120 )
    1f00:	8a 30       	cpi	r24, 0x0A	; 10
    1f02:	38 f4       	brcc	.+14     	; 0x1f12 <main+0x136>
    1f04:	23 e8       	ldi	r18, 0x83	; 131
		{
			/*FAN is ON*/
			LCD_displayStringRowColumn( 0 , 3 , str_on_Ptr);
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	6b e0       	ldi	r22, 0x0B	; 11
    1f0c:	a9 01       	movw	r20, r18
    1f0e:	e2 de       	rcall	.-572    	; 0x1cd4 <LCD_displayStringRowColumn>
    1f10:	90 cf       	rjmp	.-224    	; 0x1e32 <main+0x56>
    1f12:	8f 81       	ldd	r24, Y+7	; 0x07
			LCD_moveCursor(1 , 10);
    1f14:	84 36       	cpi	r24, 0x64	; 100
    1f16:	08 f0       	brcs	.+2      	; 0x1f1a <main+0x13e>
    1f18:	8c cf       	rjmp	.-232    	; 0x1e32 <main+0x56>
    1f1a:	26 e8       	ldi	r18, 0x86	; 134
			LCD_intgerToString(temperature); /*displaying the temp after moving the cursor*/
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	6c e0       	ldi	r22, 0x0C	; 12
    1f22:	a9 01       	movw	r20, r18
    1f24:	d7 de       	rcall	.-594    	; 0x1cd4 <LCD_displayStringRowColumn>
			DcMotor_Rotate(CW, 100 ); /*THE MOTOR WORKS WITH 100% SPEED*/
    1f26:	85 cf       	rjmp	.-246    	; 0x1e32 <main+0x56>

00001f28 <PWM_Timer0_Start>:
 * F_PWM=(F_CPU)/(256*N) = (10^6)/(256*8) = 500Hz
 * Duty Cycle can be changed be update the value in
 * The Compare Register
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
    1f28:	df 93       	push	r29
    1f2a:	cf 93       	push	r28
    1f2c:	0f 92       	push	r0
    1f2e:	cd b7       	in	r28, 0x3d	; 61
    1f30:	de b7       	in	r29, 0x3e	; 62
    1f32:	89 83       	std	Y+1, r24	; 0x01
	duty_cycle = (uint8)(((float)duty_cycle/100) * 255);/* scaling the duty number to the value of OCR0*/
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
    1f36:	88 2f       	mov	r24, r24
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	a0 e0       	ldi	r26, 0x00	; 0
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	bc 01       	movw	r22, r24
    1f40:	cd 01       	movw	r24, r26
    1f42:	0e 94 84 04 	call	0x908	; 0x908 <__floatunsisf>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	bc 01       	movw	r22, r24
    1f4c:	cd 01       	movw	r24, r26
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	48 ec       	ldi	r20, 0xC8	; 200
    1f54:	52 e4       	ldi	r21, 0x42	; 66
    1f56:	0e 94 01 03 	call	0x602	; 0x602 <__divsf3>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	bc 01       	movw	r22, r24
    1f60:	cd 01       	movw	r24, r26
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	4f e7       	ldi	r20, 0x7F	; 127
    1f68:	53 e4       	ldi	r21, 0x43	; 67
    1f6a:	0e 94 0a 02 	call	0x414	; 0x414 <__mulsf3>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	bc 01       	movw	r22, r24
    1f74:	cd 01       	movw	r24, r26
    1f76:	0e 94 40 00 	call	0x80	; 0x80 <__fixunssfsi>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; // Set Timer Initial Value to 0
    1f80:	e2 e5       	ldi	r30, 0x52	; 82
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	10 82       	st	Z, r1
	OCR0  = duty_cycle; // Set Compare Value
    1f86:	ec e5       	ldi	r30, 0x5C	; 92
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	80 83       	st	Z, r24
	// Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	63 e0       	ldi	r22, 0x03	; 3
    1f92:	41 e0       	ldi	r20, 0x01	; 1
    1f94:	0e 94 a1 07 	call	0xf42	; 0xf42 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1f98:	e3 e5       	ldi	r30, 0x53	; 83
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	8a e6       	ldi	r24, 0x6A	; 106
    1f9e:	80 83       	st	Z, r24
}
    1fa0:	0f 90       	pop	r0
    1fa2:	cf 91       	pop	r28
    1fa4:	df 91       	pop	r29
    1fa6:	08 95       	ret

00001fa8 <__mulsi3>:
    1fa8:	62 9f       	mul	r22, r18
    1faa:	d0 01       	movw	r26, r0
    1fac:	73 9f       	mul	r23, r19
    1fae:	f0 01       	movw	r30, r0
    1fb0:	82 9f       	mul	r24, r18
    1fb2:	e0 0d       	add	r30, r0
    1fb4:	f1 1d       	adc	r31, r1
    1fb6:	64 9f       	mul	r22, r20
    1fb8:	e0 0d       	add	r30, r0
    1fba:	f1 1d       	adc	r31, r1
    1fbc:	92 9f       	mul	r25, r18
    1fbe:	f0 0d       	add	r31, r0
    1fc0:	83 9f       	mul	r24, r19
    1fc2:	f0 0d       	add	r31, r0
    1fc4:	74 9f       	mul	r23, r20
    1fc6:	f0 0d       	add	r31, r0
    1fc8:	65 9f       	mul	r22, r21
    1fca:	f0 0d       	add	r31, r0
    1fcc:	99 27       	eor	r25, r25
    1fce:	72 9f       	mul	r23, r18
    1fd0:	b0 0d       	add	r27, r0
    1fd2:	e1 1d       	adc	r30, r1
    1fd4:	f9 1f       	adc	r31, r25
    1fd6:	63 9f       	mul	r22, r19
    1fd8:	b0 0d       	add	r27, r0
    1fda:	e1 1d       	adc	r30, r1
    1fdc:	f9 1f       	adc	r31, r25
    1fde:	bd 01       	movw	r22, r26
    1fe0:	cf 01       	movw	r24, r30
    1fe2:	11 24       	eor	r1, r1
    1fe4:	08 95       	ret

00001fe6 <__prologue_saves__>:
    1fe6:	2f 92       	push	r2
    1fe8:	3f 92       	push	r3
    1fea:	4f 92       	push	r4
    1fec:	5f 92       	push	r5
    1fee:	6f 92       	push	r6
    1ff0:	7f 92       	push	r7
    1ff2:	8f 92       	push	r8
    1ff4:	9f 92       	push	r9
    1ff6:	af 92       	push	r10
    1ff8:	bf 92       	push	r11
    1ffa:	cf 92       	push	r12
    1ffc:	df 92       	push	r13
    1ffe:	ef 92       	push	r14
    2000:	ff 92       	push	r15
    2002:	0f 93       	push	r16
    2004:	1f 93       	push	r17
    2006:	cf 93       	push	r28
    2008:	df 93       	push	r29
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
    200e:	ca 1b       	sub	r28, r26
    2010:	db 0b       	sbc	r29, r27
    2012:	0f b6       	in	r0, 0x3f	; 63
    2014:	f8 94       	cli
    2016:	de bf       	out	0x3e, r29	; 62
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	cd bf       	out	0x3d, r28	; 61
    201c:	09 94       	ijmp

0000201e <__epilogue_restores__>:
    201e:	2a 88       	ldd	r2, Y+18	; 0x12
    2020:	39 88       	ldd	r3, Y+17	; 0x11
    2022:	48 88       	ldd	r4, Y+16	; 0x10
    2024:	5f 84       	ldd	r5, Y+15	; 0x0f
    2026:	6e 84       	ldd	r6, Y+14	; 0x0e
    2028:	7d 84       	ldd	r7, Y+13	; 0x0d
    202a:	8c 84       	ldd	r8, Y+12	; 0x0c
    202c:	9b 84       	ldd	r9, Y+11	; 0x0b
    202e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2030:	b9 84       	ldd	r11, Y+9	; 0x09
    2032:	c8 84       	ldd	r12, Y+8	; 0x08
    2034:	df 80       	ldd	r13, Y+7	; 0x07
    2036:	ee 80       	ldd	r14, Y+6	; 0x06
    2038:	fd 80       	ldd	r15, Y+5	; 0x05
    203a:	0c 81       	ldd	r16, Y+4	; 0x04
    203c:	1b 81       	ldd	r17, Y+3	; 0x03
    203e:	aa 81       	ldd	r26, Y+2	; 0x02
    2040:	b9 81       	ldd	r27, Y+1	; 0x01
    2042:	ce 0f       	add	r28, r30
    2044:	d1 1d       	adc	r29, r1
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	f8 94       	cli
    204a:	de bf       	out	0x3e, r29	; 62
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	cd bf       	out	0x3d, r28	; 61
    2050:	ed 01       	movw	r28, r26
    2052:	08 95       	ret

00002054 <itoa>:
    2054:	fb 01       	movw	r30, r22
    2056:	9f 01       	movw	r18, r30
    2058:	e8 94       	clt
    205a:	42 30       	cpi	r20, 0x02	; 2
    205c:	bc f0       	brlt	.+46     	; 0x208c <itoa+0x38>
    205e:	45 32       	cpi	r20, 0x25	; 37
    2060:	ac f4       	brge	.+42     	; 0x208c <itoa+0x38>
    2062:	4a 30       	cpi	r20, 0x0A	; 10
    2064:	29 f4       	brne	.+10     	; 0x2070 <itoa+0x1c>
    2066:	97 fb       	bst	r25, 7
    2068:	1e f4       	brtc	.+6      	; 0x2070 <itoa+0x1c>
    206a:	90 95       	com	r25
    206c:	81 95       	neg	r24
    206e:	9f 4f       	sbci	r25, 0xFF	; 255
    2070:	64 2f       	mov	r22, r20
    2072:	77 27       	eor	r23, r23
    2074:	1e d0       	rcall	.+60     	; 0x20b2 <__udivmodhi4>
    2076:	80 5d       	subi	r24, 0xD0	; 208
    2078:	8a 33       	cpi	r24, 0x3A	; 58
    207a:	0c f0       	brlt	.+2      	; 0x207e <itoa+0x2a>
    207c:	89 5d       	subi	r24, 0xD9	; 217
    207e:	81 93       	st	Z+, r24
    2080:	cb 01       	movw	r24, r22
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	a9 f7       	brne	.-22     	; 0x2070 <itoa+0x1c>
    2086:	16 f4       	brtc	.+4      	; 0x208c <itoa+0x38>
    2088:	5d e2       	ldi	r21, 0x2D	; 45
    208a:	51 93       	st	Z+, r21
    208c:	10 82       	st	Z, r1
    208e:	c9 01       	movw	r24, r18
    2090:	00 c0       	rjmp	.+0      	; 0x2092 <strrev>

00002092 <strrev>:
    2092:	dc 01       	movw	r26, r24
    2094:	fc 01       	movw	r30, r24
    2096:	67 2f       	mov	r22, r23
    2098:	71 91       	ld	r23, Z+
    209a:	77 23       	and	r23, r23
    209c:	e1 f7       	brne	.-8      	; 0x2096 <strrev+0x4>
    209e:	32 97       	sbiw	r30, 0x02	; 2
    20a0:	04 c0       	rjmp	.+8      	; 0x20aa <strrev+0x18>
    20a2:	7c 91       	ld	r23, X
    20a4:	6d 93       	st	X+, r22
    20a6:	70 83       	st	Z, r23
    20a8:	62 91       	ld	r22, -Z
    20aa:	ae 17       	cp	r26, r30
    20ac:	bf 07       	cpc	r27, r31
    20ae:	c8 f3       	brcs	.-14     	; 0x20a2 <strrev+0x10>
    20b0:	08 95       	ret

000020b2 <__udivmodhi4>:
    20b2:	aa 1b       	sub	r26, r26
    20b4:	bb 1b       	sub	r27, r27
    20b6:	51 e1       	ldi	r21, 0x11	; 17
    20b8:	07 c0       	rjmp	.+14     	; 0x20c8 <__udivmodhi4_ep>

000020ba <__udivmodhi4_loop>:
    20ba:	aa 1f       	adc	r26, r26
    20bc:	bb 1f       	adc	r27, r27
    20be:	a6 17       	cp	r26, r22
    20c0:	b7 07       	cpc	r27, r23
    20c2:	10 f0       	brcs	.+4      	; 0x20c8 <__udivmodhi4_ep>
    20c4:	a6 1b       	sub	r26, r22
    20c6:	b7 0b       	sbc	r27, r23

000020c8 <__udivmodhi4_ep>:
    20c8:	88 1f       	adc	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	5a 95       	dec	r21
    20ce:	a9 f7       	brne	.-22     	; 0x20ba <__udivmodhi4_loop>
    20d0:	80 95       	com	r24
    20d2:	90 95       	com	r25
    20d4:	bc 01       	movw	r22, r24
    20d6:	cd 01       	movw	r24, r26
    20d8:	08 95       	ret

000020da <_exit>:
    20da:	f8 94       	cli

000020dc <__stop_program>:
    20dc:	ff cf       	rjmp	.-2      	; 0x20dc <__stop_program>
